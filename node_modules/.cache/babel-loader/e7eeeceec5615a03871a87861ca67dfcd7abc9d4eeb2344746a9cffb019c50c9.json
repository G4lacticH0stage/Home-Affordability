{"ast":null,"code":"// src/utils/taxCalculators.js - CORRECTED IMPORTS AND IMPLEMENTATIONS\nimport { FICA_RATES, STATE_TAX_DATA, TAX_TYPES, FEDERAL_TAX_BRACKETS } from '../src/data/tax-data';\nimport { INDIANA_COUNTIES } from '../src/data/indianaTaxData';\nimport { MARYLAND_COUNTIES } from '../src/data/marylandTaxData';\nimport { MICHIGAN_CITIES, calculateMichiganLocalTax } from '../src/data/michiganTaxData';\nimport { MISSOURI_CITIES } from '../src/data/missouriTaxData';\nimport { NEW_JERSEY_CITIES } from '../src/data/newJerseyTaxData';\nimport { NEW_YORK_TAX, calculateNYTax } from '../src/data/newYorkTaxData';\nimport { OHIO_MUNICIPALITIES } from '../src/data/ohioTaxData';\nimport { OREGON_TAX } from '../data/oregonTaxData';\nimport { PENNSYLVANIA_TAX } from '../src/data/pennsylvaniaTaxData';\nimport { WEST_VIRGINIA_TAX } from '../src/data/westVirginiaTaxData';\n\n// Helper function to safely get tax rate value from different tax structures\nconst getTaxRateValue = taxData => {\n  if (!taxData) return 0;\n  if (taxData.type === \"percentage\" || taxData.type === \"flat\") {\n    return taxData.value;\n  } else if (taxData.type === \"range\") {\n    return (taxData.min + taxData.max) / 2; // Use average of range\n  } else if (taxData.type === \"fixed\") {\n    return taxData.value;\n  }\n  return 0;\n};\n\n// Convert various income types to annual\nexport const convertToAnnualIncome = (income, payType) => {\n  const numericIncome = parseFloat(income);\n  if (isNaN(numericIncome)) return 0;\n  switch (payType) {\n    case 'hourly':\n      return numericIncome * 40 * 52;\n    // 40 hours per week, 52 weeks per year\n    case 'weekly':\n      return numericIncome * 52;\n    case 'biweekly':\n      return numericIncome * 26;\n    case 'monthly':\n      return numericIncome * 12;\n    case 'annual':\n    default:\n      return numericIncome;\n  }\n};\n\n// Calculate progressive tax (like federal income tax)\nexport const calculateProgressiveTax = (income, brackets) => {\n  let tax = 0;\n  let remainingIncome = income;\n  let previousLimit = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    const currentBracket = brackets[i];\n\n    // Calculate income in this bracket\n    const bracketIncome = Math.min(remainingIncome, currentBracket.limit - previousLimit);\n    if (bracketIncome <= 0) break;\n    tax += bracketIncome * currentBracket.rate;\n    remainingIncome -= bracketIncome;\n    previousLimit = currentBracket.limit;\n    if (remainingIncome <= 0) break;\n  }\n  return tax;\n};\n\n// Calculate FICA taxes (Social Security and Medicare)\nexport const calculateFICATax = income => {\n  const {\n    socialSecurity,\n    medicare,\n    additionalMedicare,\n    socialSecurityWageCap\n  } = FICA_RATES;\n\n  // Social Security has a wage cap\n  const socialSecurityTax = Math.min(income, socialSecurityWageCap) * socialSecurity;\n\n  // Regular Medicare tax\n  let medicareTax = income * medicare;\n\n  // Additional Medicare tax for high earners (over $200,000)\n  if (income > 200000) {\n    medicareTax += (income - 200000) * additionalMedicare;\n  }\n  return socialSecurityTax + medicareTax;\n};\n\n// Helper function for progressive tax with base amounts (like NY)\nconst calculateProgressiveTaxWithBaseAmount = (income, brackets) => {\n  // Find the appropriate bracket\n  const bracket = brackets.find(b => income >= b.min && income <= b.max);\n  if (!bracket) return 0;\n\n  // Calculate tax: base amount + (rate * (income - bracket min))\n  return bracket.baseAmount + (income - bracket.min) * bracket.rate;\n};\n\n// Calculate state tax based on state data and income\nexport const calculateStateTax = (income, state) => {\n  if (!state || !STATE_TAX_DATA[state]) return 0;\n  const stateData = STATE_TAX_DATA[state];\n  const taxType = stateData.taxType || TAX_TYPES.FLAT_RATE;\n  switch (taxType) {\n    case TAX_TYPES.PROGRESSIVE:\n      // Handle progressive tax brackets (like NY)\n      if (state === 'New York') {\n        // Use the existing calculation function from newYorkTaxData.js\n        const taxResult = calculateNYTax(income);\n        return taxResult.stateTax;\n      }\n      return income * stateData.rate;\n    // Fallback to flat rate if no specific implementation\n\n    case TAX_TYPES.TABLE_BASED:\n      // Handle table-based tax (like Oregon)\n      if (state === 'Oregon') {\n        // Use the calculate function from the Oregon tax data\n        return OREGON_TAX.calculateTax(income).localTax;\n      }\n      return income * stateData.rate;\n    // Fallback\n\n    case TAX_TYPES.FLAT_AMOUNT:\n      // Fixed dollar amount\n      return stateData.amount || 0;\n    case TAX_TYPES.SURTAX:\n      // Additional tax on top of state tax\n      const baseTax = income * stateData.rate;\n      return baseTax + baseTax * (stateData.surtaxRate || 0);\n    case TAX_TYPES.FLAT_RATE:\n    default:\n      // Simple percentage of income\n      return income * stateData.rate;\n  }\n};\n\n// Calculate local tax (city or county)\nexport const calculateLocalTax = (income, state, city) => {\n  if (!state || !STATE_TAX_DATA[state] || !STATE_TAX_DATA[state].hasLocalTax) {\n    return 0;\n  }\n  const stateData = STATE_TAX_DATA[state];\n\n  // Handle different local tax types\n  switch (stateData.taxType) {\n    case 'city':\n      // City-specific tax rates\n      return calculateCityTax(income, state, city);\n    case 'county':\n      // County-specific tax rates\n      return calculateCountyTax(income, state, city);\n    case 'both':\n      // Both city and county taxes (like Pennsylvania)\n      const cityTax = calculateCityTax(income, state, city);\n      const countyTax = calculateCountyTax(income, state, city);\n      return cityTax + countyTax;\n    case 'school_district':\n      // School district taxes (like Iowa)\n      return calculateSchoolDistrictTax(income, state, city);\n    default:\n      return 0;\n  }\n};\nconst calculateCityTax = (income, state, city) => {\n  // Look up city tax rate from the appropriate state file\n  switch (state) {\n    case 'Indiana':\n      if (city && INDIANA_COUNTIES[city]) {\n        return income * getTaxRateValue(INDIANA_COUNTIES[city]);\n      }\n      break;\n    case 'Michigan':\n      if (city) {\n        return calculateMichiganLocalTax(income, city);\n      }\n      break;\n    case 'Missouri':\n      if (city && MISSOURI_CITIES[city]) {\n        return income * getTaxRateValue(MISSOURI_CITIES[city]);\n      }\n      break;\n    case 'New Jersey':\n      if (city && NEW_JERSEY_CITIES[city]) {\n        return income * getTaxRateValue(NEW_JERSEY_CITIES[city]);\n      }\n      break;\n    case 'New York':\n      if (city && NEW_YORK_TAX.cities[city]) {\n        const taxResult = calculateNYTax(income, city);\n        return taxResult.cityTax;\n      }\n      break;\n    case 'Ohio':\n      if (city && OHIO_MUNICIPALITIES[city]) {\n        return income * getTaxRateValue(OHIO_MUNICIPALITIES[city]);\n      }\n      break;\n    case 'Oregon':\n      if (OREGON_TAX && OREGON_TAX.calculateTax) {\n        return OREGON_TAX.calculateTax(income).localTax;\n      }\n      return 0;\n    case 'Pennsylvania':\n      // Check if the city is actually a county in Pennsylvania's data\n      if (city && PENNSYLVANIA_TAX.counties[city]) {\n        const countyData = PENNSYLVANIA_TAX.counties[city];\n        if (countyData.type === \"fixed\") {\n          return income * countyData.value;\n        } else if (countyData.type === \"range\") {\n          // Use the midpoint of the range as an approximation\n          return income * ((countyData.max + countyData.min) / 2);\n        }\n      }\n      break;\n    case 'West Virginia':\n      if (city && WEST_VIRGINIA_TAX.cities[city]) {\n        // Pass the city parameter to the calculateTax function\n        return WEST_VIRGINIA_TAX.calculateTax(city);\n      }\n      break;\n    default:\n      return 0;\n  }\n  return 0;\n};\nconst calculateCountyTax = (income, state, county) => {\n  // Similar to city tax, but for counties\n  switch (state) {\n    case 'Maryland':\n      if (county && MARYLAND_COUNTIES[county]) {\n        return income * getTaxRateValue(MARYLAND_COUNTIES[county]);\n      }\n      break;\n    // Add cases for other states with county taxes\n    default:\n      return 0;\n  }\n  return 0;\n};\nconst calculateSchoolDistrictTax = (income, state, district) => {\n  // For states like Iowa with school district taxes\n  return 0; // Would need specific school district data\n};\n\n// Calculate federal tax\nexport const calculateFederalTax = income => {\n  return calculateProgressiveTax(income, FEDERAL_TAX_BRACKETS);\n};\n\n// Calculate total tax burden\nexport const calculateTotalTax = (income, state, city) => {\n  const federalTax = calculateFederalTax(income);\n  const ficaTax = calculateFICATax(income);\n  const stateTax = calculateStateTax(income, state);\n  const localTax = calculateLocalTax(income, state, city);\n  return {\n    federal: federalTax,\n    fica: ficaTax,\n    state: stateTax,\n    local: localTax,\n    total: federalTax + ficaTax + stateTax + localTax,\n    effectiveRate: (federalTax + ficaTax + stateTax + localTax) / income\n  };\n};\n\n// Validate user inputs\nexport const validateInputs = inputs => {\n  const errors = {};\n  if (!inputs.income || isNaN(parseFloat(inputs.income)) || parseFloat(inputs.income) <= 0) {\n    errors.income = 'Please enter a valid income amount';\n  }\n  if (!inputs.state) {\n    errors.state = 'Please select a state';\n  }\n  if (inputs.monthlyDebts && (isNaN(parseFloat(inputs.monthlyDebts)) || parseFloat(inputs.monthlyDebts) < 0)) {\n    errors.monthlyDebts = 'Please enter a valid monthly debt amount';\n  }\n  return errors;\n};\n\n// Export all calculators as an object\nexport const TAX_CALCULATORS = {\n  convertToAnnualIncome,\n  calculateProgressiveTax,\n  calculateFICATax,\n  calculateStateTax,\n  calculateLocalTax,\n  calculateFederalTax,\n  calculateTotalTax,\n  validateInputs\n};\nexport default TAX_CALCULATORS;","map":{"version":3,"names":["FICA_RATES","STATE_TAX_DATA","TAX_TYPES","FEDERAL_TAX_BRACKETS","INDIANA_COUNTIES","MARYLAND_COUNTIES","MICHIGAN_CITIES","calculateMichiganLocalTax","MISSOURI_CITIES","NEW_JERSEY_CITIES","NEW_YORK_TAX","calculateNYTax","OHIO_MUNICIPALITIES","OREGON_TAX","PENNSYLVANIA_TAX","WEST_VIRGINIA_TAX","getTaxRateValue","taxData","type","value","min","max","convertToAnnualIncome","income","payType","numericIncome","parseFloat","isNaN","calculateProgressiveTax","brackets","tax","remainingIncome","previousLimit","i","length","currentBracket","bracketIncome","Math","limit","rate","calculateFICATax","socialSecurity","medicare","additionalMedicare","socialSecurityWageCap","socialSecurityTax","medicareTax","calculateProgressiveTaxWithBaseAmount","bracket","find","b","baseAmount","calculateStateTax","state","stateData","taxType","FLAT_RATE","PROGRESSIVE","taxResult","stateTax","TABLE_BASED","calculateTax","localTax","FLAT_AMOUNT","amount","SURTAX","baseTax","surtaxRate","calculateLocalTax","city","hasLocalTax","calculateCityTax","calculateCountyTax","cityTax","countyTax","calculateSchoolDistrictTax","cities","counties","countyData","county","district","calculateFederalTax","calculateTotalTax","federalTax","ficaTax","federal","fica","local","total","effectiveRate","validateInputs","inputs","errors","monthlyDebts","TAX_CALCULATORS"],"sources":["/Users/elizabethrichardson/taxcalc/src/utils/taxCalculators.js"],"sourcesContent":["// src/utils/taxCalculators.js - CORRECTED IMPORTS AND IMPLEMENTATIONS\nimport { FICA_RATES, STATE_TAX_DATA, TAX_TYPES, FEDERAL_TAX_BRACKETS } from '../src/data/tax-data';\nimport { INDIANA_COUNTIES } from '../src/data/indianaTaxData';\nimport { MARYLAND_COUNTIES } from '../src/data/marylandTaxData';\nimport { MICHIGAN_CITIES, calculateMichiganLocalTax } from '../src/data/michiganTaxData';\nimport { MISSOURI_CITIES } from '../src/data/missouriTaxData';\nimport { NEW_JERSEY_CITIES } from '../src/data/newJerseyTaxData';\nimport { NEW_YORK_TAX, calculateNYTax } from '../src/data/newYorkTaxData';\nimport { OHIO_MUNICIPALITIES } from '../src/data/ohioTaxData';\n  import { OREGON_TAX } from '../data/oregonTaxData';\nimport { PENNSYLVANIA_TAX } from '../src/data/pennsylvaniaTaxData';\nimport { WEST_VIRGINIA_TAX } from '../src/data/westVirginiaTaxData';\n\n// Helper function to safely get tax rate value from different tax structures\nconst getTaxRateValue = (taxData) => {\n  if (!taxData) return 0;\n  \n  if (taxData.type === \"percentage\" || taxData.type === \"flat\") {\n    return taxData.value;\n  } else if (taxData.type === \"range\") {\n    return (taxData.min + taxData.max) / 2; // Use average of range\n  } else if (taxData.type === \"fixed\") {\n    return taxData.value;\n  }\n  \n  return 0;\n};\n\n// Convert various income types to annual\nexport const convertToAnnualIncome = (income, payType) => {\n  const numericIncome = parseFloat(income);\n  \n  if (isNaN(numericIncome)) return 0;\n  \n  switch (payType) {\n    case 'hourly':\n      return numericIncome * 40 * 52; // 40 hours per week, 52 weeks per year\n    case 'weekly':\n      return numericIncome * 52;\n    case 'biweekly':\n      return numericIncome * 26;\n    case 'monthly':\n      return numericIncome * 12;\n    case 'annual':\n    default:\n      return numericIncome;\n  }\n};\n\n// Calculate progressive tax (like federal income tax)\nexport const calculateProgressiveTax = (income, brackets) => {\n  let tax = 0;\n  let remainingIncome = income;\n  let previousLimit = 0;\n  \n  for (let i = 0; i < brackets.length; i++) {\n    const currentBracket = brackets[i];\n    \n    // Calculate income in this bracket\n    const bracketIncome = Math.min(\n      remainingIncome,\n      currentBracket.limit - previousLimit\n    );\n    \n    if (bracketIncome <= 0) break;\n    \n    tax += bracketIncome * currentBracket.rate;\n    remainingIncome -= bracketIncome;\n    previousLimit = currentBracket.limit;\n    \n    if (remainingIncome <= 0) break;\n  }\n  \n  return tax;\n};\n\n// Calculate FICA taxes (Social Security and Medicare)\nexport const calculateFICATax = (income) => {\n  const { socialSecurity, medicare, additionalMedicare, socialSecurityWageCap } = FICA_RATES;\n  \n  // Social Security has a wage cap\n  const socialSecurityTax = Math.min(income, socialSecurityWageCap) * socialSecurity;\n  \n  // Regular Medicare tax\n  let medicareTax = income * medicare;\n  \n  // Additional Medicare tax for high earners (over $200,000)\n  if (income > 200000) {\n    medicareTax += (income - 200000) * additionalMedicare;\n  }\n  \n  return socialSecurityTax + medicareTax;\n};\n\n// Helper function for progressive tax with base amounts (like NY)\nconst calculateProgressiveTaxWithBaseAmount = (income, brackets) => {\n  // Find the appropriate bracket\n  const bracket = brackets.find(b => income >= b.min && income <= b.max);\n  \n  if (!bracket) return 0;\n  \n  // Calculate tax: base amount + (rate * (income - bracket min))\n  return bracket.baseAmount + ((income - bracket.min) * bracket.rate);\n};\n\n// Calculate state tax based on state data and income\nexport const calculateStateTax = (income, state) => {\n  if (!state || !STATE_TAX_DATA[state]) return 0;\n  \n  const stateData = STATE_TAX_DATA[state];\n  const taxType = stateData.taxType || TAX_TYPES.FLAT_RATE;\n  \n  switch (taxType) {\n    case TAX_TYPES.PROGRESSIVE:\n      // Handle progressive tax brackets (like NY)\n      if (state === 'New York') {\n        // Use the existing calculation function from newYorkTaxData.js\n        const taxResult = calculateNYTax(income);\n        return taxResult.stateTax;\n      }\n      return income * stateData.rate; // Fallback to flat rate if no specific implementation\n      \n    case TAX_TYPES.TABLE_BASED:\n      // Handle table-based tax (like Oregon)\n      if (state === 'Oregon') {\n        // Use the calculate function from the Oregon tax data\n        return OREGON_TAX.calculateTax(income).localTax;\n      }\n      return income * stateData.rate; // Fallback\n      \n    case TAX_TYPES.FLAT_AMOUNT:\n      // Fixed dollar amount\n      return stateData.amount || 0;\n      \n    case TAX_TYPES.SURTAX:\n      // Additional tax on top of state tax\n      const baseTax = income * stateData.rate;\n      return baseTax + (baseTax * (stateData.surtaxRate || 0));\n      \n    case TAX_TYPES.FLAT_RATE:\n    default:\n      // Simple percentage of income\n      return income * stateData.rate;\n  }\n};\n\n// Calculate local tax (city or county)\nexport const calculateLocalTax = (income, state, city) => {\n  if (!state || !STATE_TAX_DATA[state] || !STATE_TAX_DATA[state].hasLocalTax) {\n    return 0;\n  }\n  \n  const stateData = STATE_TAX_DATA[state];\n  \n  // Handle different local tax types\n  switch (stateData.taxType) {\n    case 'city':\n      // City-specific tax rates\n      return calculateCityTax(income, state, city);\n      \n    case 'county':\n      // County-specific tax rates\n      return calculateCountyTax(income, state, city);\n      \n    case 'both':\n      // Both city and county taxes (like Pennsylvania)\n      const cityTax = calculateCityTax(income, state, city);\n      const countyTax = calculateCountyTax(income, state, city);\n      return cityTax + countyTax;\n      \n    case 'school_district':\n      // School district taxes (like Iowa)\n      return calculateSchoolDistrictTax(income, state, city);\n      \n    default:\n      return 0;\n  }\n};\n\nconst calculateCityTax = (income, state, city) => {\n  // Look up city tax rate from the appropriate state file\n  switch (state) {\n    case 'Indiana':\n      if (city && INDIANA_COUNTIES[city]) {\n        return income * getTaxRateValue(INDIANA_COUNTIES[city]);\n      }\n      break;\n    case 'Michigan':\n      if (city) {\n        return calculateMichiganLocalTax(income, city);\n      }\n      break;\n    case 'Missouri':\n      if (city && MISSOURI_CITIES[city]) {\n        return income * getTaxRateValue(MISSOURI_CITIES[city]);\n      }\n      break;\n    case 'New Jersey':\n      if (city && NEW_JERSEY_CITIES[city]) {\n        return income * getTaxRateValue(NEW_JERSEY_CITIES[city]);\n      }\n      break;\n    case 'New York':\n      if (city && NEW_YORK_TAX.cities[city]) {\n        const taxResult = calculateNYTax(income, city);\n        return taxResult.cityTax;\n      }\n      break;\n    case 'Ohio':\n      if (city && OHIO_MUNICIPALITIES[city]) {\n        return income * getTaxRateValue(OHIO_MUNICIPALITIES[city]);\n      }\n      break;\n    case 'Oregon':\n      if (OREGON_TAX && OREGON_TAX.calculateTax) {\n        return OREGON_TAX.calculateTax(income).localTax;\n      }\n      return 0;\n    case 'Pennsylvania':\n      // Check if the city is actually a county in Pennsylvania's data\n      if (city && PENNSYLVANIA_TAX.counties[city]) {\n        const countyData = PENNSYLVANIA_TAX.counties[city];\n        if (countyData.type === \"fixed\") {\n          return income * countyData.value;\n        } else if (countyData.type === \"range\") {\n          // Use the midpoint of the range as an approximation\n          return income * ((countyData.max + countyData.min) / 2);\n        }\n      }\n      break;\n    case 'West Virginia':\n      if (city && WEST_VIRGINIA_TAX.cities[city]) {\n        // Pass the city parameter to the calculateTax function\n        return WEST_VIRGINIA_TAX.calculateTax(city);\n      }\n      break;\n    default:\n      return 0;\n  }\n  return 0;\n};\n\nconst calculateCountyTax = (income, state, county) => {\n  // Similar to city tax, but for counties\n  switch (state) {\n    case 'Maryland':\n      if (county && MARYLAND_COUNTIES[county]) {\n        return income * getTaxRateValue(MARYLAND_COUNTIES[county]);\n      }\n      break;\n    // Add cases for other states with county taxes\n    default:\n      return 0;\n  }\n  return 0;\n};\n\nconst calculateSchoolDistrictTax = (income, state, district) => {\n  // For states like Iowa with school district taxes\n  return 0; // Would need specific school district data\n};\n\n// Calculate federal tax\nexport const calculateFederalTax = (income) => {\n  return calculateProgressiveTax(income, FEDERAL_TAX_BRACKETS);\n};\n\n// Calculate total tax burden\nexport const calculateTotalTax = (income, state, city) => {\n  const federalTax = calculateFederalTax(income);\n  const ficaTax = calculateFICATax(income);\n  const stateTax = calculateStateTax(income, state);\n  const localTax = calculateLocalTax(income, state, city);\n  \n  return {\n    federal: federalTax,\n    fica: ficaTax,\n    state: stateTax,\n    local: localTax,\n    total: federalTax + ficaTax + stateTax + localTax,\n    effectiveRate: (federalTax + ficaTax + stateTax + localTax) / income\n  };\n};\n\n// Validate user inputs\nexport const validateInputs = (inputs) => {\n  const errors = {};\n  \n  if (!inputs.income || isNaN(parseFloat(inputs.income)) || parseFloat(inputs.income) <= 0) {\n    errors.income = 'Please enter a valid income amount';\n  }\n  \n  if (!inputs.state) {\n    errors.state = 'Please select a state';\n  }\n  \n  if (inputs.monthlyDebts && (isNaN(parseFloat(inputs.monthlyDebts)) || parseFloat(inputs.monthlyDebts) < 0)) {\n    errors.monthlyDebts = 'Please enter a valid monthly debt amount';\n  }\n  \n  return errors;\n};\n\n// Export all calculators as an object\nexport const TAX_CALCULATORS = {\n  convertToAnnualIncome,\n  calculateProgressiveTax,\n  calculateFICATax,\n  calculateStateTax,\n  calculateLocalTax,\n  calculateFederalTax,\n  calculateTotalTax,\n  validateInputs\n};\n\nexport default TAX_CALCULATORS;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}