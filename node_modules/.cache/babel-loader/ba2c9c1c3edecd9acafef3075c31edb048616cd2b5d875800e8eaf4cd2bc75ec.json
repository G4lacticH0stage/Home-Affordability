{"ast":null,"code":"// Tax Types Enum\nexport const TAX_TYPES = {\n  FLAT_RATE: \"flat_rate\",\n  // Simple percentage\n  PROGRESSIVE: \"progressive\",\n  // Bracket-based (like federal)\n  SURTAX: \"surtax\",\n  // Additional tax on state tax\n  FLAT_AMOUNT: \"flat_amount\",\n  // Fixed dollar amount\n  TABLE_BASED: \"table_based\" // Like Oregon's system\n};\n\n// Base State Tax Data\nexport const STATE_TAX_DATA = {\n  \"Alabama\": {\n    rate: 0.05,\n    hasLocalTax: false\n  },\n  \"Alaska\": {\n    rate: 0,\n    hasLocalTax: false\n  },\n  \"Arizona\": {\n    rate: 0.025,\n    hasLocalTax: false\n  },\n  \"Arkansas\": {\n    rate: 0.039,\n    hasLocalTax: false\n  },\n  \"California\": {\n    rate: 0.133,\n    hasLocalTax: false\n  },\n  \"Colorado\": {\n    rate: 0.044,\n    hasLocalTax: true,\n    taxType: \"city\"\n  },\n  \"Connecticut\": {\n    rate: 0.0699,\n    hasLocalTax: false\n  },\n  \"Delaware\": {\n    rate: 0.066,\n    hasLocalTax: false\n  },\n  \"Florida\": {\n    rate: 0,\n    hasLocalTax: false\n  },\n  \"Georgia\": {\n    rate: 0.0539,\n    hasLocalTax: false\n  },\n  \"Hawaii\": {\n    rate: 0.11,\n    hasLocalTax: false\n  },\n  \"Idaho\": {\n    rate: 0.05965,\n    hasLocalTax: false\n  },\n  \"Illinois\": {\n    rate: 0.049,\n    hasLocalTax: false\n  },\n  \"Indiana\": {\n    rate: 0.03,\n    hasLocalTax: true,\n    taxType: \"county\"\n  },\n  \"Iowa\": {\n    rate: 0.038,\n    hasLocalTax: true,\n    taxType: \"school_district\"\n  },\n  \"Kansas\": {\n    rate: 0.0558,\n    hasLocalTax: false\n  },\n  \"Kentucky\": {\n    rate: 0.04,\n    hasLocalTax: true,\n    taxType: \"city\"\n  },\n  \"Louisiana\": {\n    rate: 0.03,\n    hasLocalTax: false\n  },\n  \"Maine\": {\n    rate: 0.0715,\n    hasLocalTax: false\n  },\n  \"Maryland\": {\n    rate: 0.0575,\n    hasLocalTax: true,\n    taxType: \"county\"\n  },\n  \"Massachusetts\": {\n    rate: 0.09,\n    hasLocalTax: false\n  },\n  \"Michigan\": {\n    rate: 0.0425,\n    hasLocalTax: true,\n    taxType: \"city\"\n  },\n  \"Minnesota\": {\n    rate: 0.0985,\n    hasLocalTax: false\n  },\n  \"Mississippi\": {\n    rate: 0.044,\n    hasLocalTax: false\n  },\n  \"Missouri\": {\n    rate: 0.047,\n    hasLocalTax: true,\n    taxType: \"city\"\n  },\n  \"Montana\": {\n    rate: 0.059,\n    hasLocalTax: false\n  },\n  \"Nebraska\": {\n    rate: 0.052,\n    hasLocalTax: false\n  },\n  \"Nevada\": {\n    rate: 0,\n    hasLocalTax: false\n  },\n  \"New Hampshire\": {\n    rate: 0,\n    hasLocalTax: false\n  },\n  \"New Jersey\": {\n    rate: 0.1075,\n    hasLocalTax: true,\n    taxType: \"city\"\n  },\n  \"New Mexico\": {\n    rate: 0.059,\n    hasLocalTax: false\n  },\n  \"New York\": {\n    rate: 0.109,\n    hasLocalTax: true,\n    taxType: \"city\",\n    useProgressiveBrackets: true\n  },\n  \"North Carolina\": {\n    rate: 0.0425,\n    hasLocalTax: false\n  },\n  \"North Dakota\": {\n    rate: 0.025,\n    hasLocalTax: false\n  },\n  \"Ohio\": {\n    rate: 0.035,\n    hasLocalTax: true,\n    taxType: \"city\"\n  },\n  \"Oklahoma\": {\n    rate: 0.0475,\n    hasLocalTax: false\n  },\n  \"Oregon\": {\n    rate: 0.099,\n    hasLocalTax: true,\n    taxType: \"table_based\"\n  },\n  \"Pennsylvania\": {\n    rate: 0.0307,\n    hasLocalTax: true,\n    taxType: \"both\"\n  },\n  \"Rhode Island\": {\n    rate: 0.0599,\n    hasLocalTax: false\n  },\n  \"South Carolina\": {\n    rate: 0.062,\n    hasLocalTax: false\n  },\n  \"South Dakota\": {\n    rate: 0,\n    hasLocalTax: false\n  },\n  \"Tennessee\": {\n    rate: 0,\n    hasLocalTax: false\n  },\n  \"Texas\": {\n    rate: 0,\n    hasLocalTax: false\n  },\n  \"Utah\": {\n    rate: 0.0455,\n    hasLocalTax: false\n  },\n  \"Vermont\": {\n    rate: 0.0875,\n    hasLocalTax: false\n  },\n  \"Virginia\": {\n    rate: 0.0575,\n    hasLocalTax: false\n  },\n  \"Washington\": {\n    rate: 0.07,\n    hasLocalTax: false\n  },\n  \"West Virginia\": {\n    rate: 0.0482,\n    hasLocalTax: true,\n    taxType: \"city\"\n  },\n  \"Wisconsin\": {\n    rate: 0.0765,\n    hasLocalTax: false\n  },\n  \"Wyoming\": {\n    rate: 0,\n    hasLocalTax: false\n  }\n};\n\n// Federal Tax Brackets\n// Define the federal tax brackets correctly with \"limit\" being the upper bound of each bracket\nconst FEDERAL_TAX_BRACKETS_2024 = [{\n  min: 0,\n  max: 11600,\n  rate: 0.10\n}, {\n  min: 11600,\n  max: 47150,\n  rate: 0.12\n}, {\n  min: 47150,\n  max: 100525,\n  rate: 0.22\n}, {\n  min: 100525,\n  max: 191950,\n  rate: 0.24\n}, {\n  min: 191950,\n  max: 243725,\n  rate: 0.32\n}, {\n  min: 243725,\n  max: 609350,\n  rate: 0.35\n}, {\n  min: 609350,\n  max: Infinity,\n  rate: 0.37\n}];\n\n// Calculate progressive tax (like federal income tax)\nconst calculateProgressiveTax = (income, brackets) => {\n  let tax = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    const currentBracket = brackets[i];\n\n    // Calculate income in this bracket\n    const bracketMin = currentBracket.min;\n    const bracketMax = currentBracket.max;\n    if (income > bracketMin) {\n      // Calculate the portion of income that falls within this bracket\n      const taxableInThisBracket = Math.min(income, bracketMax) - bracketMin;\n      tax += taxableInThisBracket * currentBracket.rate;\n    }\n\n    // If we've processed all income, we can stop\n    if (income <= bracketMax) break;\n  }\n  return tax;\n};\n\n// Example calculation for $58,000 income\nfunction calculateExampleTax() {\n  const income = 58000;\n  const federalTax = calculateProgressiveTax(income, FEDERAL_TAX_BRACKETS_2024);\n  console.log(`Federal tax on $${income.toFixed(2)}:`);\n\n  // Show calculation breakdown\n  let totalTax = 0;\n  for (let i = 0; i < FEDERAL_TAX_BRACKETS_2024.length; i++) {\n    const bracket = FEDERAL_TAX_BRACKETS_2024[i];\n    if (income > bracket.min) {\n      const taxableAmount = Math.min(income, bracket.max) - bracket.min;\n      const taxInBracket = taxableAmount * bracket.rate;\n      totalTax += taxInBracket;\n      console.log(`${bracket.min.toLocaleString()} to ${Math.min(income, bracket.max).toLocaleString()}: ${taxableAmount.toLocaleString()} @ ${(bracket.rate * 100).toFixed(1)}% = $${taxInBracket.toFixed(2)}`);\n    }\n    if (income <= bracket.max) break;\n  }\n  console.log(`Total federal tax: $${totalTax.toFixed(2)}`);\n  console.log(`Effective tax rate: ${(totalTax / income * 100).toFixed(2)}%`);\n  return federalTax;\n}\ncalculateExampleTax();\n\n// FICA Tax Constants\nexport const FICA_RATES = {\n  socialSecurity: 0.062,\n  // 6.2%\n  medicare: 0.0145,\n  // 1.45%\n  additionalMedicare: 0.009,\n  // 0.9% additional Medicare tax for high earners\n  socialSecurityWageCap: 168600 // 2024 wage cap for Social Security tax\n};","map":{"version":3,"names":["TAX_TYPES","FLAT_RATE","PROGRESSIVE","SURTAX","FLAT_AMOUNT","TABLE_BASED","STATE_TAX_DATA","rate","hasLocalTax","taxType","useProgressiveBrackets","FEDERAL_TAX_BRACKETS_2024","min","max","Infinity","calculateProgressiveTax","income","brackets","tax","i","length","currentBracket","bracketMin","bracketMax","taxableInThisBracket","Math","calculateExampleTax","federalTax","console","log","toFixed","totalTax","bracket","taxableAmount","taxInBracket","toLocaleString","FICA_RATES","socialSecurity","medicare","additionalMedicare","socialSecurityWageCap"],"sources":["/Users/elizabethrichardson/taxcalc/src/data/tax-data.js"],"sourcesContent":["// Tax Types Enum\nexport const TAX_TYPES = {\n    FLAT_RATE: \"flat_rate\",       // Simple percentage\n    PROGRESSIVE: \"progressive\",    // Bracket-based (like federal)\n    SURTAX: \"surtax\",            // Additional tax on state tax\n    FLAT_AMOUNT: \"flat_amount\",   // Fixed dollar amount\n    TABLE_BASED: \"table_based\"    // Like Oregon's system\n  };\n  \n  // Base State Tax Data\n  export const STATE_TAX_DATA = {\n    \"Alabama\": { rate: 0.05, hasLocalTax: false},\n    \"Alaska\": { rate: 0, hasLocalTax: false },\n    \"Arizona\": { rate: 0.025, hasLocalTax: false },\n    \"Arkansas\": { rate: 0.039, hasLocalTax: false },\n    \"California\": { rate: 0.133, hasLocalTax: false },\n    \"Colorado\": { rate: 0.044, hasLocalTax: true, taxType: \"city\" },\n    \"Connecticut\": { rate: 0.0699, hasLocalTax: false },\n    \"Delaware\": { rate: 0.066, hasLocalTax: false},\n    \"Florida\": { rate: 0, hasLocalTax: false },\n    \"Georgia\": { rate: 0.0539, hasLocalTax: false },\n    \"Hawaii\": { rate: 0.11, hasLocalTax: false },\n    \"Idaho\": { rate: 0.05965, hasLocalTax: false },\n    \"Illinois\": { rate: 0.049, hasLocalTax: false },\n    \"Indiana\": { rate: 0.03, hasLocalTax: true, taxType: \"county\" },\n    \"Iowa\": { rate: 0.038, hasLocalTax: true, taxType: \"school_district\" },\n    \"Kansas\": { rate: 0.0558, hasLocalTax: false },\n    \"Kentucky\": { rate: 0.04, hasLocalTax: true, taxType: \"city\" },\n    \"Louisiana\": { rate: 0.03, hasLocalTax: false },\n    \"Maine\": { rate: 0.0715, hasLocalTax: false },\n    \"Maryland\": { rate: 0.0575, hasLocalTax: true, taxType: \"county\" },\n    \"Massachusetts\": { rate: 0.09, hasLocalTax: false },\n    \"Michigan\": { rate: 0.0425, hasLocalTax: true, taxType: \"city\" },\n    \"Minnesota\": { rate: 0.0985, hasLocalTax: false },\n    \"Mississippi\": { rate: 0.044, hasLocalTax: false },\n    \"Missouri\": { rate: 0.047, hasLocalTax: true, taxType: \"city\" },\n    \"Montana\": { rate: 0.059, hasLocalTax: false },\n    \"Nebraska\": { rate: 0.052, hasLocalTax: false },\n    \"Nevada\": { rate: 0, hasLocalTax: false },\n    \"New Hampshire\": { rate: 0, hasLocalTax: false },\n    \"New Jersey\": { rate: 0.1075, hasLocalTax: true, taxType: \"city\" },\n    \"New Mexico\": { rate: 0.059, hasLocalTax: false },\n    \"New York\": { rate: 0.109, hasLocalTax: true, taxType: \"city\", useProgressiveBrackets: true },\n    \"North Carolina\": { rate: 0.0425, hasLocalTax: false },\n    \"North Dakota\": { rate: 0.025, hasLocalTax: false },\n    \"Ohio\": { rate: 0.035, hasLocalTax: true, taxType: \"city\" },\n    \"Oklahoma\": { rate: 0.0475, hasLocalTax: false },\n    \"Oregon\": { rate: 0.099, hasLocalTax: true, taxType: \"table_based\" },\n    \"Pennsylvania\": { rate: 0.0307, hasLocalTax: true, taxType: \"both\" },\n    \"Rhode Island\": { rate: 0.0599, hasLocalTax: false },\n    \"South Carolina\": { rate: 0.062, hasLocalTax: false },\n    \"South Dakota\": { rate: 0, hasLocalTax: false },\n    \"Tennessee\": { rate: 0, hasLocalTax: false },\n    \"Texas\": { rate: 0, hasLocalTax: false },\n    \"Utah\": { rate: 0.0455, hasLocalTax: false },\n    \"Vermont\": { rate: 0.0875, hasLocalTax: false },\n    \"Virginia\": { rate: 0.0575, hasLocalTax: false },\n    \"Washington\": { rate: 0.07, hasLocalTax: false },\n    \"West Virginia\": { rate: 0.0482, hasLocalTax: true, taxType: \"city\" },\n    \"Wisconsin\": { rate: 0.0765, hasLocalTax: false },\n    \"Wyoming\": { rate: 0, hasLocalTax: false }\n  };\n  \n  // Federal Tax Brackets\n // Define the federal tax brackets correctly with \"limit\" being the upper bound of each bracket\nconst FEDERAL_TAX_BRACKETS_2024 = [\n  { min: 0, max: 11600, rate: 0.10 },\n  { min: 11600, max: 47150, rate: 0.12 },\n  { min: 47150, max: 100525, rate: 0.22 },\n  { min: 100525, max: 191950, rate: 0.24 },\n  { min: 191950, max: 243725, rate: 0.32 },\n  { min: 243725, max: 609350, rate: 0.35 },\n  { min: 609350, max: Infinity, rate: 0.37 }\n];\n\n// Calculate progressive tax (like federal income tax)\nconst calculateProgressiveTax = (income, brackets) => {\n  let tax = 0;\n  \n  for (let i = 0; i < brackets.length; i++) {\n    const currentBracket = brackets[i];\n    \n    // Calculate income in this bracket\n    const bracketMin = currentBracket.min;\n    const bracketMax = currentBracket.max;\n    \n    if (income > bracketMin) {\n      // Calculate the portion of income that falls within this bracket\n      const taxableInThisBracket = Math.min(income, bracketMax) - bracketMin;\n      tax += taxableInThisBracket * currentBracket.rate;\n    }\n    \n    // If we've processed all income, we can stop\n    if (income <= bracketMax) break;\n  }\n  \n  return tax;\n};\n\n// Example calculation for $58,000 income\nfunction calculateExampleTax() {\n  const income = 58000;\n  const federalTax = calculateProgressiveTax(income, FEDERAL_TAX_BRACKETS_2024);\n  \n  console.log(`Federal tax on $${income.toFixed(2)}:`);\n  \n  // Show calculation breakdown\n  let totalTax = 0;\n  for (let i = 0; i < FEDERAL_TAX_BRACKETS_2024.length; i++) {\n    const bracket = FEDERAL_TAX_BRACKETS_2024[i];\n    if (income > bracket.min) {\n      const taxableAmount = Math.min(income, bracket.max) - bracket.min;\n      const taxInBracket = taxableAmount * bracket.rate;\n      totalTax += taxInBracket;\n      \n      console.log(`${bracket.min.toLocaleString()} to ${Math.min(income, bracket.max).toLocaleString()}: ${taxableAmount.toLocaleString()} @ ${(bracket.rate * 100).toFixed(1)}% = $${taxInBracket.toFixed(2)}`);\n    }\n    \n    if (income <= bracket.max) break;\n  }\n  \n  console.log(`Total federal tax: $${totalTax.toFixed(2)}`);\n  console.log(`Effective tax rate: ${((totalTax / income) * 100).toFixed(2)}%`);\n  \n  return federalTax;\n}\n\ncalculateExampleTax(); \n  \n  // FICA Tax Constants\n  export const FICA_RATES = {\n    socialSecurity: 0.062,  // 6.2%\n    medicare: 0.0145,      // 1.45%\n    additionalMedicare: 0.009, // 0.9% additional Medicare tax for high earners\n    socialSecurityWageCap: 168600 // 2024 wage cap for Social Security tax\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}