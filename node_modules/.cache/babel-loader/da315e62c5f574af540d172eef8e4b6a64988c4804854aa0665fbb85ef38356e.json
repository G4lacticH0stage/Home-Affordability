{"ast":null,"code":"// New York Tax Structure\nexport const NEW_YORK_TAX = {\n  // City tax rates\n  cities: {\n    \"New York City\": {\n      type: \"percentage\",\n      value: 0.0397\n    },\n    \"Yonkers\": {\n      type: \"percentage\",\n      value: 0.015\n    }\n  },\n  // Progressive state tax brackets\n  stateBrackets: [{\n    min: 0,\n    max: 8500,\n    rate: 0.04,\n    baseAmount: 0\n  }, {\n    min: 8500,\n    max: 11700,\n    rate: 0.045,\n    baseAmount: 340\n  }, {\n    min: 11700,\n    max: 13900,\n    rate: 0.0525,\n    baseAmount: 484\n  }, {\n    min: 13900,\n    max: 80650,\n    rate: 0.055,\n    baseAmount: 600\n  }, {\n    min: 80650,\n    max: 215400,\n    rate: 0.06,\n    baseAmount: 4271\n  }, {\n    min: 215400,\n    max: 1077550,\n    rate: 0.0685,\n    baseAmount: 12356\n  }, {\n    min: 1077550,\n    max: 5000000,\n    rate: 0.0965,\n    baseAmount: 71413\n  }, {\n    min: 5000000,\n    max: 25000000,\n    rate: 0.103,\n    baseAmount: 449929\n  }, {\n    min: 25000000,\n    max: Infinity,\n    rate: 0.109,\n    baseAmount: 2509929\n  }]\n};\n\n// Helper function for NY tax calculation\nexport const calculateNYTax = (income, city = null) => {\n  // Find applicable tax bracket\n  const bracket = NEW_YORK_TAX.stateBrackets.find(b => income >= b.min && income <= b.max);\n\n  // Calculate state tax\n  const stateTax = bracket ? bracket.baseAmount + (income - bracket.min) * bracket.rate : 0;\n\n  // Calculate city tax if applicable\n  const cityTax = city && NEW_YORK_TAX.cities[city] ? income * NEW_YORK_TAX.cities[city].value : 0;\n  return {\n    stateTax,\n    cityTax,\n    totalTax: stateTax + cityTax\n  };\n};","map":{"version":3,"names":["NEW_YORK_TAX","cities","type","value","stateBrackets","min","max","rate","baseAmount","Infinity","calculateNYTax","income","city","bracket","find","b","stateTax","cityTax","totalTax"],"sources":["/Users/elizabethrichardson/taxcalc/src/data/newYorkTaxData.js"],"sourcesContent":["// New York Tax Structure\nexport const NEW_YORK_TAX = {\n    // City tax rates\n    cities: {\n      \"New York City\": { type: \"percentage\", value: 0.0397 },\n      \"Yonkers\": { type: \"percentage\", value: 0.015 }\n    },\n    // Progressive state tax brackets\n    stateBrackets: [\n      { min: 0, max: 8500, rate: 0.04, baseAmount: 0 },\n      { min: 8500, max: 11700, rate: 0.045, baseAmount: 340 },\n      { min: 11700, max: 13900, rate: 0.0525, baseAmount: 484 },\n      { min: 13900, max: 80650, rate: 0.055, baseAmount: 600 },\n      { min: 80650, max: 215400, rate: 0.06, baseAmount: 4271 },\n      { min: 215400, max: 1077550, rate: 0.0685, baseAmount: 12356 },\n      { min: 1077550, max: 5000000, rate: 0.0965, baseAmount: 71413 },\n      { min: 5000000, max: 25000000, rate: 0.103, baseAmount: 449929 },\n      { min: 25000000, max: Infinity, rate: 0.109, baseAmount: 2509929 }\n    ]\n  };\n  \n  // Helper function for NY tax calculation\n  export const calculateNYTax = (income, city = null) => {\n    // Find applicable tax bracket\n    const bracket = NEW_YORK_TAX.stateBrackets.find(\n      b => income >= b.min && income <= b.max\n    );\n  \n    // Calculate state tax\n    const stateTax = bracket ? \n      bracket.baseAmount + ((income - bracket.min) * bracket.rate) : 0;\n  \n    // Calculate city tax if applicable\n    const cityTax = city && NEW_YORK_TAX.cities[city] ?\n      income * NEW_YORK_TAX.cities[city].value : 0;\n  \n    return {\n      stateTax,\n      cityTax,\n      totalTax: stateTax + cityTax\n    };\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG;EACxB;EACAC,MAAM,EAAE;IACN,eAAe,EAAE;MAAEC,IAAI,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAO,CAAC;IACtD,SAAS,EAAE;MAAED,IAAI,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAM;EAChD,CAAC;EACD;EACAC,aAAa,EAAE,CACb;IAAEC,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE,IAAI;IAAEC,IAAI,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAE,CAAC,EAChD;IAAEH,GAAG,EAAE,IAAI;IAAEC,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAC,EACvD;IAAEH,GAAG,EAAE,KAAK;IAAEC,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAI,CAAC,EACzD;IAAEH,GAAG,EAAE,KAAK;IAAEC,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAC,EACxD;IAAEH,GAAG,EAAE,KAAK;IAAEC,GAAG,EAAE,MAAM;IAAEC,IAAI,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAK,CAAC,EACzD;IAAEH,GAAG,EAAE,MAAM;IAAEC,GAAG,EAAE,OAAO;IAAEC,IAAI,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAM,CAAC,EAC9D;IAAEH,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEC,IAAI,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAM,CAAC,EAC/D;IAAEH,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,QAAQ;IAAEC,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAO,CAAC,EAChE;IAAEH,GAAG,EAAE,QAAQ;IAAEC,GAAG,EAAEG,QAAQ;IAAEF,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAQ,CAAC;AAEtE,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAGA,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAI,KAAK;EACrD;EACA,MAAMC,OAAO,GAAGb,YAAY,CAACI,aAAa,CAACU,IAAI,CAC7CC,CAAC,IAAIJ,MAAM,IAAII,CAAC,CAACV,GAAG,IAAIM,MAAM,IAAII,CAAC,CAACT,GACtC,CAAC;;EAED;EACA,MAAMU,QAAQ,GAAGH,OAAO,GACtBA,OAAO,CAACL,UAAU,GAAI,CAACG,MAAM,GAAGE,OAAO,CAACR,GAAG,IAAIQ,OAAO,CAACN,IAAK,GAAG,CAAC;;EAElE;EACA,MAAMU,OAAO,GAAGL,IAAI,IAAIZ,YAAY,CAACC,MAAM,CAACW,IAAI,CAAC,GAC/CD,MAAM,GAAGX,YAAY,CAACC,MAAM,CAACW,IAAI,CAAC,CAACT,KAAK,GAAG,CAAC;EAE9C,OAAO;IACLa,QAAQ;IACRC,OAAO;IACPC,QAAQ,EAAEF,QAAQ,GAAGC;EACvB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}