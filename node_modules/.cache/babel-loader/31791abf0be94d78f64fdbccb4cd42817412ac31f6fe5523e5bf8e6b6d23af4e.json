{"ast":null,"code":"var _jsxFileName = \"/Users/elizabethrichardson/taxcalc/src/components/HomeAffordabilityCalculator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './TaxCalculator.css';\nimport { INDIANA_COUNTIES } from '../data/indianaTaxData';\nimport { MARYLAND_COUNTIES } from '../data/marylandTaxData';\nimport { MICHIGAN_CITIES, calculateMichiganLocalTax } from '../data/michiganTaxData';\nimport { MISSOURI_CITIES } from '../data/missouriTaxData';\nimport { NEW_JERSEY_CITIES } from '../data/newJerseyTaxData';\nimport { NEW_YORK_TAX, calculateNYTax } from '../data/newYorkTaxData';\nimport { OHIO_MUNICIPALITIES } from '../data/ohioTaxData';\nimport { OREGON_TAX } from '../data/oregon-tax';\nimport { PENNSYLVANIA_TAX } from '../data/pennsylvaniaTaxData';\nimport { WEST_VIRGINIA_TAX } from '../data/westVirginiaTaxData';\nimport { STATE_TAX_DATA } from '../data/tax-data';\n\n// Utility functions\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst calculateMonthlyMortgage = (homePrice, downPayment, interestRate, loanTermYears) => {\n  // Calculate loan amount\n  const loanAmount = homePrice - downPayment;\n\n  // Convert annual interest rate to monthly and decimal form\n  const monthlyInterestRate = interestRate / 100 / 12;\n\n  // Calculate number of payments\n  const numberOfPayments = loanTermYears * 12;\n\n  // Avoid division by zero for 0% interest\n  if (monthlyInterestRate === 0) {\n    return loanAmount / numberOfPayments;\n  }\n\n  // Use mortgage payment formula: M = P * (r * (1 + r)^n) / ((1 + r)^n - 1)\n  const monthlyPayment = loanAmount * (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)) / (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1);\n  return monthlyPayment;\n};\n\n// Calculate maximum home price based on gross income\nconst calculateMaxHomePrice = (monthlyGrossIncome, interestRate, loanTermYears, downPayment, monthlyDebts = 0) => {\n  // Maximum payment based on whether there are debts included\n  // If debts included, use 36% rule (minus debts), otherwise use 28% rule\n  const maxMonthlyPaymentPercent = monthlyDebts > 0 ? 0.36 : 0.28;\n  const maxMonthlyPayment = monthlyGrossIncome * maxMonthlyPaymentPercent - monthlyDebts;\n  if (maxMonthlyPayment <= 0) return 0;\n\n  // Convert annual interest rate to monthly\n  const monthlyInterestRate = interestRate / 100 / 12;\n\n  // Number of payments\n  const numberOfPayments = loanTermYears * 12;\n\n  // Avoid division by zero for 0% interest\n  if (monthlyInterestRate === 0) {\n    const maxLoanAmount = maxMonthlyPayment * numberOfPayments;\n    return maxLoanAmount + downPayment;\n  }\n\n  // Calculate maximum loan amount\n  // Using formula: P = pmt * (1 - (1 + r)^-n) / r\n  const maxLoanAmount = maxMonthlyPayment * (1 - Math.pow(1 + monthlyInterestRate, -numberOfPayments)) / monthlyInterestRate;\n\n  // Calculate max home price (loan amount + down payment)\n  const maxHomePrice = maxLoanAmount + downPayment;\n  return maxHomePrice;\n};\n\n// Format currency for display\nconst formatCurrency = value => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    maximumFractionDigits: 0\n  }).format(value);\n};\n\n// Format percentage for display\nconst formatPercentage = value => {\n  return value.toFixed(1) + '%';\n};\n\n// Federal Tax Brackets 2024\nconst FEDERAL_TAX_BRACKETS = [{\n  limit: 11600,\n  rate: 0.10\n}, {\n  limit: 47150,\n  rate: 0.12\n}, {\n  limit: 100525,\n  rate: 0.22\n}, {\n  limit: 191950,\n  rate: 0.24\n}, {\n  limit: 243725,\n  rate: 0.32\n}, {\n  limit: 609350,\n  rate: 0.35\n}, {\n  limit: Infinity,\n  rate: 0.37\n}];\n\n// FICA rates\nconst FICA_RATES = {\n  socialSecurity: 0.062,\n  // 6.2%\n  medicare: 0.0145,\n  // 1.45%\n  additionalMedicare: 0.009,\n  // 0.9% additional Medicare tax for high earners\n  socialSecurityWageCap: 168600 // 2024 wage cap for Social Security tax\n};\n\n// State tax rates (simplified)\nconst STATE_TAX_RATES = {\n  \"Alabama\": 0.05,\n  \"Alaska\": 0.00,\n  \"Arizona\": 0.025,\n  \"Arkansas\": 0.039,\n  \"California\": 0.095,\n  \"Colorado\": 0.044,\n  \"Connecticut\": 0.0699,\n  \"Delaware\": 0.066,\n  \"Florida\": 0.00,\n  \"Georgia\": 0.0539,\n  \"Hawaii\": 0.11,\n  \"Idaho\": 0.059,\n  \"Illinois\": 0.049,\n  \"Indiana\": 0.03,\n  \"Iowa\": 0.038,\n  \"Kansas\": 0.055,\n  \"Kentucky\": 0.04,\n  \"Louisiana\": 0.03,\n  \"Maine\": 0.071,\n  \"Maryland\": 0.057,\n  \"Massachusetts\": 0.09,\n  \"Michigan\": 0.042,\n  \"Minnesota\": 0.098,\n  \"Mississippi\": 0.044,\n  \"Missouri\": 0.047,\n  \"Montana\": 0.059,\n  \"Nebraska\": 0.052,\n  \"Nevada\": 0.00,\n  \"New Hampshire\": 0.05,\n  \"New Jersey\": 0.057,\n  \"New Mexico\": 0.059,\n  \"New York\": 0.065,\n  \"North Carolina\": 0.0425,\n  \"North Dakota\": 0.025,\n  \"Ohio\": 0.035,\n  \"Oklahoma\": 0.0475,\n  \"Oregon\": 0.099,\n  \"Pennsylvania\": 0.0307,\n  \"Rhode Island\": 0.0599,\n  \"South Carolina\": 0.062,\n  \"South Dakota\": 0.00,\n  \"Tennessee\": 0.00,\n  \"Texas\": 0.00,\n  \"Utah\": 0.0455,\n  \"Vermont\": 0.0875,\n  \"Virginia\": 0.0575,\n  \"Washington\": 0.00,\n  \"West Virginia\": 0.0482,\n  \"Wisconsin\": 0.0765,\n  \"Wyoming\": 0.00\n};\n\n// Default interest rates by term\nconst DEFAULT_INTEREST_RATES = {\n  10: 5.84,\n  15: 5.96,\n  30: 6.5\n};\n\n// Convert various income types to annual\nconst convertToAnnualIncome = (income, payType) => {\n  const numericIncome = parseFloat(income);\n  if (isNaN(numericIncome)) return 0;\n  switch (payType) {\n    case 'hourly':\n      return numericIncome * 40 * 52;\n    // 40 hours per week, 52 weeks per year\n    case 'weekly':\n      return numericIncome * 52;\n    case 'biweekly':\n      return numericIncome * 26;\n    case 'monthly':\n      return numericIncome * 12;\n    case 'annual':\n    default:\n      return numericIncome;\n  }\n};\n\n// Calculate progressive tax (like federal income tax)\nconst calculateProgressiveTax = (income, brackets) => {\n  let tax = 0;\n  let remainingIncome = income;\n  let previousLimit = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    const currentBracket = brackets[i];\n\n    // Calculate income in this bracket\n    const bracketIncome = Math.min(remainingIncome, currentBracket.limit - previousLimit);\n    if (bracketIncome <= 0) break;\n    tax += bracketIncome * currentBracket.rate;\n    remainingIncome -= bracketIncome;\n    previousLimit = currentBracket.limit;\n    if (remainingIncome <= 0) break;\n  }\n  return tax;\n};\n\n// Calculate FICA taxes (Social Security and Medicare)\nconst calculateFICATax = income => {\n  const {\n    socialSecurity,\n    medicare,\n    additionalMedicare,\n    socialSecurityWageCap\n  } = FICA_RATES;\n\n  // Social Security has a wage cap\n  const socialSecurityTax = Math.min(income, socialSecurityWageCap) * socialSecurity;\n\n  // Regular Medicare tax\n  let medicareTax = income * medicare;\n\n  // Additional Medicare tax for high earners (over $200,000)\n  if (income > 200000) {\n    medicareTax += (income - 200000) * additionalMedicare;\n  }\n  return {\n    socialSecurity: socialSecurityTax,\n    medicare: medicareTax,\n    total: socialSecurityTax + medicareTax\n  };\n};\n\n// Calculate federal tax\nconst calculateFederalTax = income => {\n  return calculateProgressiveTax(income, FEDERAL_TAX_BRACKETS);\n};\n\n// Calculate state tax (simplified)\nconst calculateStateTax = (income, state) => {\n  if (!state || !STATE_TAX_RATES[state]) return 0;\n  return income * STATE_TAX_RATES[state];\n};\n\n// Calculate total tax burden\nconst calculateTotalTax = (income, state) => {\n  const federalTax = calculateFederalTax(income);\n  const ficaTaxes = calculateFICATax(income);\n  const stateTax = calculateStateTax(income, state);\n  return {\n    federal: federalTax,\n    fica: ficaTaxes.total,\n    ficaSocialSecurity: ficaTaxes.socialSecurity,\n    ficaMedicare: ficaTaxes.medicare,\n    state: stateTax,\n    total: federalTax + ficaTaxes.total + stateTax,\n    effectiveRate: (federalTax + ficaTaxes.total + stateTax) / income\n  };\n};\n\n// Get affordability color class based on income percentage and debt situation\nconst getAffordabilityColorClass = (percentage, hasDebts) => {\n  if (hasDebts) {\n    // Using 36% rule with debts\n    if (percentage <= 36) return \"green\";\n    if (percentage <= 42) return \"yellow\";\n    return \"red\";\n  } else {\n    // Using 28% rule without debts\n    if (percentage <= 28) return \"green\";\n    if (percentage <= 32) return \"yellow\";\n    return \"red\";\n  }\n};\nconst HomeAffordabilityCalculator = () => {\n  _s();\n  // Income and tax state\n  const [incomeData, setIncomeData] = useState({\n    income: '',\n    payType: 'annual',\n    state: '',\n    useCustomTakeHome: false,\n    monthlyTakeHome: ''\n  });\n\n  // Housing state\n  const [housingData, setHousingData] = useState({\n    homePrice: '',\n    downPaymentType: 'percent',\n    // 'percent' or 'amount'\n    downPaymentPercent: '20',\n    downPaymentAmount: '',\n    loanTermYears: '30',\n    includePropertyTax: true,\n    propertyTaxRate: '1.1',\n    includeHomeInsurance: true,\n    homeInsurance: '1200'\n  });\n\n  // Additional financial details\n  const [financialData, setFinancialData] = useState({\n    monthlyDebts: ''\n  });\n\n  // Results and UI state\n  const [errors, setErrors] = useState({});\n  const [results, setResults] = useState(null);\n  const [activeTab, setActiveTab] = useState('what-can-i-afford');\n  const [showDetailedResults, setShowDetailedResults] = useState(false);\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const [paymentsByTerm, setPaymentsByTerm] = useState(null);\n\n  // Set interest rate based on loan term\n  useEffect(() => {\n    const term = parseInt(housingData.loanTermYears, 10);\n    const defaultRate = DEFAULT_INTEREST_RATES[term] || DEFAULT_INTEREST_RATES[30];\n    setHousingData(prev => ({\n      ...prev,\n      interestRate: defaultRate\n    }));\n  }, [housingData.loanTermYears]);\n\n  // Calculate down payment amount when percent changes\n  useEffect(() => {\n    if (housingData.downPaymentType === 'percent' && housingData.homePrice) {\n      const homePrice = parseFloat(housingData.homePrice);\n      const percent = parseFloat(housingData.downPaymentPercent);\n      if (!isNaN(homePrice) && !isNaN(percent)) {\n        const amount = homePrice * (percent / 100);\n        setHousingData(prev => ({\n          ...prev,\n          downPaymentAmount: amount.toFixed(0)\n        }));\n      }\n    }\n  }, [housingData.downPaymentPercent, housingData.homePrice, housingData.downPaymentType]);\n\n  // Calculate down payment percent when amount changes\n  useEffect(() => {\n    if (housingData.downPaymentType === 'amount' && housingData.homePrice) {\n      const homePrice = parseFloat(housingData.homePrice);\n      const amount = parseFloat(housingData.downPaymentAmount);\n      if (!isNaN(homePrice) && !isNaN(amount) && homePrice > 0) {\n        const percent = amount / homePrice * 100;\n        setHousingData(prev => ({\n          ...prev,\n          downPaymentPercent: percent.toFixed(1)\n        }));\n      }\n    }\n  }, [housingData.downPaymentAmount, housingData.homePrice, housingData.downPaymentType]);\n\n  // Handle changes to income data\n  const handleIncomeChange = (field, value) => {\n    setIncomeData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Handle changes to housing data\n  const handleHousingChange = (field, value) => {\n    setHousingData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Handle changes to financial data\n  const handleFinancialChange = (field, value) => {\n    setFinancialData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Switch between percentage and amount for down payment\n  const handleDownPaymentTypeChange = type => {\n    setHousingData(prev => ({\n      ...prev,\n      downPaymentType: type\n    }));\n  };\n\n  // Validate the input form\n  const validateForm = () => {\n    const newErrors = {};\n    if (!incomeData.useCustomTakeHome) {\n      // Validate income inputs\n      if (!incomeData.income) {\n        newErrors.income = 'Income is required';\n      } else if (isNaN(parseFloat(incomeData.income)) || parseFloat(incomeData.income) <= 0) {\n        newErrors.income = 'Please enter a valid income amount';\n      }\n      if (!incomeData.state) {\n        newErrors.state = 'State selection is required for tax calculation';\n      }\n    } else {\n      // Validate custom take-home pay\n      if (!incomeData.monthlyTakeHome) {\n        newErrors.monthlyTakeHome = 'Monthly take-home pay is required';\n      } else if (isNaN(parseFloat(incomeData.monthlyTakeHome)) || parseFloat(incomeData.monthlyTakeHome) <= 0) {\n        newErrors.monthlyTakeHome = 'Please enter a valid monthly take-home amount';\n      }\n    }\n\n    // If we're analyzing a specific home, validate home price\n    if (activeTab === 'analyze-mortgage' && !housingData.homePrice) {\n      newErrors.homePrice = 'Home price is required';\n    } else if (activeTab === 'analyze-mortgage' && (isNaN(parseFloat(housingData.homePrice)) || parseFloat(housingData.homePrice) <= 0)) {\n      newErrors.homePrice = 'Please enter a valid home price';\n    }\n\n    // Validate down payment\n    if (housingData.downPaymentType === 'percent') {\n      if (!housingData.downPaymentPercent || isNaN(parseFloat(housingData.downPaymentPercent)) || parseFloat(housingData.downPaymentPercent) < 0 || parseFloat(housingData.downPaymentPercent) > 100) {\n        newErrors.downPaymentPercent = 'Down payment must be between 0% and 100%';\n      }\n    } else {\n      if (!housingData.downPaymentAmount || isNaN(parseFloat(housingData.downPaymentAmount)) || parseFloat(housingData.downPaymentAmount) < 0) {\n        newErrors.downPaymentAmount = 'Please enter a valid down payment amount';\n      }\n    }\n\n    // Validate optional financial data\n    if (financialData.monthlyDebts && (isNaN(parseFloat(financialData.monthlyDebts)) || parseFloat(financialData.monthlyDebts) < 0)) {\n      newErrors.monthlyDebts = 'Please enter a valid monthly debt amount';\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Calculate affordability (what can I afford)\n  const calculateAffordability = () => {\n    if (!validateForm()) return;\n    try {\n      let annualIncome = 0;\n      let monthlyGrossIncome = 0;\n      let monthlyTakeHome = 0;\n      let taxResults = {\n        total: 0,\n        federal: 0,\n        fica: 0,\n        state: 0,\n        effectiveRate: 0\n      };\n\n      // Calculate gross income and taxes\n      if (!incomeData.useCustomTakeHome) {\n        // Convert to annual income and calculate taxes\n        annualIncome = convertToAnnualIncome(incomeData.income, incomeData.payType);\n        taxResults = calculateTotalTax(annualIncome, incomeData.state);\n        monthlyGrossIncome = annualIncome / 12;\n        const takeHomePay = annualIncome - taxResults.total;\n        monthlyTakeHome = takeHomePay / 12;\n      } else {\n        // Use custom take-home pay and estimate gross (simplified)\n        monthlyTakeHome = parseFloat(incomeData.monthlyTakeHome);\n        // Estimate gross as approximately 130% of take-home (rough estimate)\n        monthlyGrossIncome = monthlyTakeHome * 1.3;\n        annualIncome = monthlyGrossIncome * 12;\n      }\n\n      // Parse other inputs\n      const monthlyDebts = parseFloat(financialData.monthlyDebts) || 0;\n      const hasDebts = monthlyDebts > 0;\n      const interestRate = parseFloat(housingData.interestRate);\n      const loanTermYears = parseInt(housingData.loanTermYears, 10);\n\n      // Determine down payment based on type\n      let downPaymentPercent, downPaymentAmount;\n      if (housingData.downPaymentType === 'percent') {\n        downPaymentPercent = parseFloat(housingData.downPaymentPercent);\n        // Will calculate actual amount after we know max home price\n      } else {\n        downPaymentAmount = parseFloat(housingData.downPaymentAmount);\n        // Will use this fixed amount\n      }\n\n      // Calculate affordability ratios\n      // Front-end ratio: 28% of monthly gross income for housing (PITI)\n      const frontEndMaxPayment = monthlyGrossIncome * 0.28;\n      // Back-end ratio: 36% of monthly gross income for all debt payments\n      const backEndMaxPayment = monthlyGrossIncome * 0.36 - monthlyDebts;\n      // Use the more conservative of the two\n      const maxMonthlyPayment = Math.min(frontEndMaxPayment, backEndMaxPayment);\n\n      // Adjust for property tax and insurance\n      let additionalHousingCosts = 0;\n      if (housingData.includePropertyTax) {\n        const propertyTaxRate = parseFloat(housingData.propertyTaxRate) / 100;\n        // Will estimate with a placeholder value for now\n        additionalHousingCosts += 300000 * propertyTaxRate / 12; // Placeholder home value\n      }\n      if (housingData.includeHomeInsurance) {\n        const annualInsurance = parseFloat(housingData.homeInsurance) || 1200;\n        additionalHousingCosts += annualInsurance / 12;\n      }\n\n      // Adjust max payment to account for property tax and insurance\n      const maxPIPayment = maxMonthlyPayment - additionalHousingCosts;\n      if (maxPIPayment <= 0) {\n        setErrors({\n          general: 'Your expenses and debts are too high relative to your income for a mortgage'\n        });\n        return;\n      }\n\n      // Calculate max home price based on the down payment situation\n      let maxHomePrice, maxLoanAmount;\n      if (housingData.downPaymentType === 'percent') {\n        // Percentage-based down payment\n        maxHomePrice = calculateMaxHomePrice(monthlyGrossIncome, interestRate, loanTermYears, 0,\n        // Temporarily use 0 for down payment\n        monthlyDebts);\n\n        // Now apply the down payment percentage\n        downPaymentAmount = maxHomePrice * (downPaymentPercent / 100);\n        maxLoanAmount = maxHomePrice - downPaymentAmount;\n      } else {\n        // Fixed amount down payment\n        // For fixed down payment, we need to calculate differently\n        const fixedDownPayment = parseFloat(housingData.downPaymentAmount);\n\n        // Calculate max loan amount first\n        const maxLoanPayment = maxPIPayment;\n        const monthlyInterestRate = interestRate / 100 / 12;\n        const numberOfPayments = loanTermYears * 12;\n        if (monthlyInterestRate === 0) {\n          maxLoanAmount = maxLoanPayment * numberOfPayments;\n        } else {\n          maxLoanAmount = maxLoanPayment * (1 - Math.pow(1 + monthlyInterestRate, -numberOfPayments)) / monthlyInterestRate;\n        }\n\n        // Then calculate max home price by adding fixed down payment\n        maxHomePrice = maxLoanAmount + fixedDownPayment;\n        downPaymentAmount = fixedDownPayment;\n        downPaymentPercent = fixedDownPayment / maxHomePrice * 100;\n      }\n\n      // Calculate monthly mortgage payment\n      const baseMonthlyPayment = calculateMonthlyMortgage(maxHomePrice, downPaymentAmount, interestRate, loanTermYears);\n\n      // Calculate more precise property tax and insurance now that we know max home price\n      let totalMonthlyPayment = baseMonthlyPayment;\n      let monthlyPropertyTax = 0;\n      let monthlyInsurance = 0;\n      if (housingData.includePropertyTax) {\n        const propertyTaxRate = parseFloat(housingData.propertyTaxRate) / 100;\n        monthlyPropertyTax = maxHomePrice * propertyTaxRate / 12;\n        totalMonthlyPayment += monthlyPropertyTax;\n      }\n      if (housingData.includeHomeInsurance) {\n        const annualInsurance = parseFloat(housingData.homeInsurance) || 1200;\n        monthlyInsurance = annualInsurance / 12;\n        totalMonthlyPayment += monthlyInsurance;\n      }\n\n      // Calculate payment options for different terms\n      const termOptions = [10, 15, 30];\n      const paymentOptions = {};\n      termOptions.forEach(term => {\n        const termInterestRate = DEFAULT_INTEREST_RATES[term] || DEFAULT_INTEREST_RATES[30];\n        const termPayment = calculateMonthlyMortgage(maxHomePrice, downPaymentAmount, termInterestRate, term);\n        let totalTermPayment = termPayment;\n        if (housingData.includePropertyTax) {\n          totalTermPayment += monthlyPropertyTax;\n        }\n        if (housingData.includeHomeInsurance) {\n          totalTermPayment += monthlyInsurance;\n        }\n        const totalInterest = termPayment * (term * 12) - maxLoanAmount;\n        const percentOfGrossIncome = totalTermPayment / monthlyGrossIncome * 100;\n        paymentOptions[term] = {\n          loanTerm: term,\n          interestRate: termInterestRate,\n          principalAndInterest: termPayment,\n          totalPayment: totalTermPayment,\n          totalInterest: totalInterest,\n          percentOfGrossIncome: percentOfGrossIncome,\n          percentOfTakeHome: totalTermPayment / monthlyTakeHome * 100,\n          isAffordable: hasDebts ? percentOfGrossIncome <= 36 : percentOfGrossIncome <= 28,\n          affordabilityClass: getAffordabilityColorClass(percentOfGrossIncome, hasDebts)\n        };\n      });\n      setPaymentsByTerm(paymentOptions);\n\n      // Create results object\n      const affordabilityResults = {\n        // Income details\n        annualIncome,\n        monthlyGrossIncome,\n        monthlyTakeHome,\n        // Tax details\n        federalTax: taxResults.federal,\n        ficaTax: taxResults.fica,\n        ficaSocialSecurity: taxResults.ficaSocialSecurity,\n        ficaMedicare: taxResults.ficaMedicare,\n        stateTax: taxResults.state,\n        totalTax: taxResults.total,\n        effectiveTaxRate: taxResults.effectiveRate * 100,\n        // Financial details\n        monthlyDebts,\n        hasDebts,\n        // Affordability details\n        frontEndMaxPayment,\n        backEndMaxPayment,\n        maxMonthlyPIPayment: maxPIPayment,\n        maxMonthlyAllPayment: maxMonthlyPayment,\n        // Mortgage details\n        maxHomePrice,\n        maxLoanAmount,\n        downPaymentAmount,\n        downPaymentPercent,\n        interestRate,\n        loanTermYears,\n        baseMonthlyPayment,\n        monthlyPropertyTax,\n        monthlyInsurance,\n        totalMonthlyPayment,\n        // Percentages\n        percentOfGrossIncome: totalMonthlyPayment / monthlyGrossIncome * 100,\n        percentOfTakeHomePay: totalMonthlyPayment / monthlyTakeHome * 100,\n        isAffordable: hasDebts ? totalMonthlyPayment / monthlyGrossIncome * 100 <= 36 : totalMonthlyPayment / monthlyGrossIncome * 100 <= 28,\n        affordabilityClass: getAffordabilityColorClass(totalMonthlyPayment / monthlyGrossIncome * 100, hasDebts)\n      };\n      setResults(affordabilityResults);\n    } catch (error) {\n      console.error(\"Calculation error:\", error);\n      setErrors({\n        general: \"An error occurred during calculation. Please check your inputs.\"\n      });\n    }\n  };\n\n  // Analyze a specific home price\n  const analyzeSpecificHome = () => {\n    if (!validateForm()) return;\n    try {\n      let annualIncome = 0;\n      let monthlyGrossIncome = 0;\n      let monthlyTakeHome = 0;\n      let taxResults = {\n        total: 0,\n        federal: 0,\n        fica: 0,\n        state: 0,\n        effectiveRate: 0\n      };\n\n      // Calculate income and taxes\n      if (!incomeData.useCustomTakeHome) {\n        // Convert to annual income and calculate taxes\n        annualIncome = convertToAnnualIncome(incomeData.income, incomeData.payType);\n        taxResults = calculateTotalTax(annualIncome, incomeData.state);\n        monthlyGrossIncome = annualIncome / 12;\n        const takeHomePay = annualIncome - taxResults.total;\n        monthlyTakeHome = takeHomePay / 12;\n      } else {\n        // Use custom take-home pay\n        monthlyTakeHome = parseFloat(incomeData.monthlyTakeHome);\n        // Estimate gross as approximately 130% of take-home (rough estimate)\n        monthlyGrossIncome = monthlyTakeHome * 1.3;\n        annualIncome = monthlyGrossIncome * 12;\n      }\n\n      // Parse other inputs\n      const monthlyDebts = parseFloat(financialData.monthlyDebts) || 0;\n      const hasDebts = monthlyDebts > 0;\n      const interestRate = parseFloat(housingData.interestRate);\n      const loanTermYears = parseInt(housingData.loanTermYears, 10);\n      const homePrice = parseFloat(housingData.homePrice);\n\n      // Determine down payment\n      let downPaymentAmount, downPaymentPercent;\n      if (housingData.downPaymentType === 'percent') {\n        downPaymentPercent = parseFloat(housingData.downPaymentPercent);\n        downPaymentAmount = homePrice * (downPaymentPercent / 100);\n      } else {\n        downPaymentAmount = parseFloat(housingData.downPaymentAmount);\n        downPaymentPercent = downPaymentAmount / homePrice * 100;\n      }\n\n      // Calculate loan amount\n      const loanAmount = homePrice - downPaymentAmount;\n\n      // Calculate monthly mortgage payment\n      const baseMonthlyPayment = calculateMonthlyMortgage(homePrice, downPaymentAmount, interestRate, loanTermYears);\n\n      // Calculate total monthly payment with taxes and insurance\n      let totalMonthlyPayment = baseMonthlyPayment;\n      let monthlyPropertyTax = 0;\n      let monthlyInsurance = 0;\n      if (housingData.includePropertyTax) {\n        const propertyTaxRate = parseFloat(housingData.propertyTaxRate) / 100;\n        monthlyPropertyTax = homePrice * propertyTaxRate / 12;\n        totalMonthlyPayment += monthlyPropertyTax;\n      }\n      if (housingData.includeHomeInsurance) {\n        const annualInsurance = parseFloat(housingData.homeInsurance) || 1200;\n        monthlyInsurance = annualInsurance / 12;\n        totalMonthlyPayment += monthlyInsurance;\n      }\n\n      // Calculate affordability ratios\n      const percentOfGrossIncome = totalMonthlyPayment / monthlyGrossIncome * 100;\n      const percentOfTakeHomePay = totalMonthlyPayment / monthlyTakeHome * 100;\n      const isAffordable = hasDebts ? percentOfGrossIncome <= 36 : percentOfGrossIncome <= 28;\n\n      // Calculate payment options for different terms\n      const termOptions = [10, 15, 30];\n      const paymentOptions = {};\n      termOptions.forEach(term => {\n        const termInterestRate = DEFAULT_INTEREST_RATES[term] || DEFAULT_INTEREST_RATES[30];\n        const termPayment = calculateMonthlyMortgage(homePrice, downPaymentAmount, termInterestRate, term);\n        let totalTermPayment = termPayment;\n        if (housingData.includePropertyTax) {\n          totalTermPayment += monthlyPropertyTax;\n        }\n        if (housingData.includeHomeInsurance) {\n          totalTermPayment += monthlyInsurance;\n        }\n        const totalInterest = termPayment * (term * 12) - loanAmount;\n        const termPercentOfGrossIncome = totalTermPayment / monthlyGrossIncome * 100;\n        paymentOptions[term] = {\n          loanTerm: term,\n          interestRate: termInterestRate,\n          principalAndInterest: termPayment,\n          totalPayment: totalTermPayment,\n          totalInterest: totalInterest,\n          percentOfGrossIncome: termPercentOfGrossIncome,\n          percentOfTakeHome: totalTermPayment / monthlyTakeHome * 100,\n          isAffordable: hasDebts ? termPercentOfGrossIncome <= 36 : termPercentOfGrossIncome <= 28,\n          affordabilityClass: getAffordabilityColorClass(termPercentOfGrossIncome, hasDebts)\n        };\n      });\n      setPaymentsByTerm(paymentOptions);\n\n      // Create results object\n      const affordabilityResults = {\n        // Income details\n        annualIncome,\n        monthlyGrossIncome,\n        monthlyTakeHome,\n        // Tax details\n        federalTax: taxResults.federal,\n        ficaTax: taxResults.fica,\n        ficaSocialSecurity: taxResults.ficaSocialSecurity,\n        ficaMedicare: taxResults.ficaMedicare,\n        stateTax: taxResults.state,\n        totalTax: taxResults.total,\n        effectiveTaxRate: taxResults.effectiveRate * 100,\n        // Financial details\n        monthlyDebts,\n        hasDebts,\n        // Mortgage details\n        homePrice,\n        loanAmount,\n        downPaymentAmount,\n        downPaymentPercent,\n        interestRate,\n        loanTermYears,\n        baseMonthlyPayment,\n        monthlyPropertyTax,\n        monthlyInsurance,\n        totalMonthlyPayment,\n        // Affordability metrics\n        percentOfGrossIncome,\n        percentOfTakeHomePay,\n        isAffordable,\n        affordabilityClass: getAffordabilityColorClass(percentOfGrossIncome, hasDebts)\n      };\n      setResults(affordabilityResults);\n    } catch (error) {\n      console.error(\"Calculation error:\", error);\n      setErrors({\n        general: \"An error occurred during calculation. Please check your inputs.\"\n      });\n    }\n  };\n  const handleCalculate = () => {\n    if (activeTab === 'what-can-i-afford') {\n      calculateAffordability();\n    } else {\n      analyzeSpecificHome();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tax-calculator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Home Affordability Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Find your ideal home price based on your income and financial situation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-button ${activeTab === 'what-can-i-afford' ? 'active' : ''}`,\n        onClick: () => setActiveTab('what-can-i-afford'),\n        children: \"What Can I Afford?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-button ${activeTab === 'analyze-mortgage' ? 'active' : ''}`,\n        onClick: () => setActiveTab('analyze-mortgage'),\n        children: \"Analyze a Home Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 855,\n      columnNumber: 7\n    }, this), errors.general && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.general\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calculator-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calculator-inputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Income Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 881,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"useCustomTakeHome\",\n              checked: incomeData.useCustomTakeHome,\n              onChange: e => handleIncomeChange('useCustomTakeHome', e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"useCustomTakeHome\",\n              children: \"I know my monthly take-home pay (after taxes)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 13\n          }, this), !incomeData.useCustomTakeHome ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"income\",\n                children: \"Income\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 898,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"income\",\n                  value: incomeData.income,\n                  onChange: e => handleIncomeChange('income', e.target.value),\n                  type: \"text\",\n                  placeholder: \"e.g. 75000\",\n                  className: errors.income ? \"error-input\" : \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 900,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: incomeData.payType,\n                  onChange: e => handleIncomeChange('payType', e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"hourly\",\n                    children: \"Hourly\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 912,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"weekly\",\n                    children: \"Weekly\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 913,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"biweekly\",\n                    children: \"Bi-Weekly\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 914,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"monthly\",\n                    children: \"Monthly\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 915,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"annual\",\n                    children: \"Annual\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 916,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 908,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 899,\n                columnNumber: 19\n              }, this), errors.income && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"error\",\n                children: errors.income\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 919,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 897,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"state\",\n                children: \"State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 923,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"state\",\n                value: incomeData.state,\n                onChange: e => handleIncomeChange('state', e.target.value),\n                className: errors.state ? \"error-input\" : \"\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select state\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 930,\n                  columnNumber: 21\n                }, this), Object.keys(STATE_TAX_RATES).sort().map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: state,\n                  children: state\n                }, state, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 932,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 924,\n                columnNumber: 19\n              }, this), errors.state && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"error\",\n                children: errors.state\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 935,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 922,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"monthlyTakeHome\",\n              children: \"Monthly Take-Home Pay\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 940,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"monthlyTakeHome\",\n              value: incomeData.monthlyTakeHome,\n              onChange: e => handleIncomeChange('monthlyTakeHome', e.target.value),\n              type: \"text\",\n              placeholder: \"e.g. 4500\",\n              className: errors.monthlyTakeHome ? \"error-input\" : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 941,\n              columnNumber: 17\n            }, this), errors.monthlyTakeHome && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.monthlyTakeHome\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 949,\n              columnNumber: 44\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Enter your monthly income after taxes and deductions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 950,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Financial Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 957,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"monthlyDebts\",\n              children: \"Monthly Debt Payments ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 960,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"monthlyDebts\",\n              value: financialData.monthlyDebts,\n              onChange: e => handleFinancialChange('monthlyDebts', e.target.value),\n              type: \"text\",\n              placeholder: \"e.g. 500\",\n              className: errors.monthlyDebts ? \"error-input\" : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 961,\n              columnNumber: 15\n            }, this), errors.monthlyDebts && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.monthlyDebts\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 969,\n              columnNumber: 39\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Car loans, student loans, credit cards, etc.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 970,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 959,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Mortgage Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 977,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowAdvancedOptions(!showAdvancedOptions),\n              className: \"toggle-button\",\n              children: showAdvancedOptions ? \"Hide Advanced\" : \"Show Advanced\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 978,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 976,\n            columnNumber: 13\n          }, this), activeTab === 'analyze-mortgage' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"homePrice\",\n              children: \"Home Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 988,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"homePrice\",\n              value: housingData.homePrice,\n              onChange: e => handleHousingChange('homePrice', e.target.value),\n              type: \"text\",\n              placeholder: \"e.g. 350000\",\n              className: errors.homePrice ? \"error-input\" : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 989,\n              columnNumber: 17\n            }, this), errors.homePrice && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.homePrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 997,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 987,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Down Payment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1002,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"down-payment-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: `toggle-option ${housingData.downPaymentType === 'percent' ? 'active' : ''}`,\n                onClick: () => handleDownPaymentTypeChange('percent'),\n                children: \"Percentage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1004,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `toggle-option ${housingData.downPaymentType === 'amount' ? 'active' : ''}`,\n                onClick: () => handleDownPaymentTypeChange('amount'),\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1010,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1003,\n              columnNumber: 15\n            }, this), housingData.downPaymentType === 'percent' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"downPaymentPercent\",\n                value: housingData.downPaymentPercent,\n                onChange: e => handleHousingChange('downPaymentPercent', e.target.value),\n                type: \"text\",\n                placeholder: \"e.g. 20\",\n                className: errors.downPaymentPercent ? \"error-input\" : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1020,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"input-suffix\",\n                children: \"%\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1028,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1019,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"input-prefix\",\n                children: \"$\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1032,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"downPaymentAmount\",\n                value: housingData.downPaymentAmount,\n                onChange: e => handleHousingChange('downPaymentAmount', e.target.value),\n                type: \"text\",\n                placeholder: \"e.g. 70000\",\n                className: errors.downPaymentAmount ? \"error-input\" : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1033,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1031,\n              columnNumber: 17\n            }, this), errors.downPaymentPercent && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.downPaymentPercent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1045,\n              columnNumber: 17\n            }, this), errors.downPaymentAmount && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.downPaymentAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1048,\n              columnNumber: 17\n            }, this), housingData.downPaymentType === 'percent' && housingData.homePrice && /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"Down payment amount: \", formatCurrency(housingData.downPaymentAmount || 0)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1052,\n              columnNumber: 17\n            }, this), housingData.downPaymentType === 'amount' && housingData.homePrice && /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"Down payment percentage: \", formatPercentage(housingData.downPaymentPercent || 0)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1057,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1001,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"loanTermYears\",\n              children: \"Loan Term\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1064,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"loanTermYears\",\n              value: housingData.loanTermYears,\n              onChange: e => handleHousingChange('loanTermYears', e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"10\",\n                children: [\"10 years (\", DEFAULT_INTEREST_RATES[10], \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1070,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"15\",\n                children: [\"15 years (\", DEFAULT_INTEREST_RATES[15], \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1071,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"30\",\n                children: [\"30 years (\", DEFAULT_INTEREST_RATES[30], \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1072,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1065,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Interest rates based on current averages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1074,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1063,\n            columnNumber: 13\n          }, this), showAdvancedOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"advanced-options\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: \"includePropertyTax\",\n                checked: housingData.includePropertyTax,\n                onChange: e => handleHousingChange('includePropertyTax', e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1080,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"includePropertyTax\",\n                children: \"Include property tax\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1086,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1079,\n              columnNumber: 17\n            }, this), housingData.includePropertyTax && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group indented\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"propertyTaxRate\",\n                children: \"Property Tax Rate (%)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1093,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"propertyTaxRate\",\n                value: housingData.propertyTaxRate,\n                onChange: e => handleHousingChange('propertyTaxRate', e.target.value),\n                type: \"text\",\n                placeholder: \"e.g. 1.1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1094,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                children: \"The average property tax rate in the US is 1.1%\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1101,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1092,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: \"includeHomeInsurance\",\n                checked: housingData.includeHomeInsurance,\n                onChange: e => handleHousingChange('includeHomeInsurance', e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1106,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"includeHomeInsurance\",\n                children: \"Include home insurance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1112,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1105,\n              columnNumber: 17\n            }, this), housingData.includeHomeInsurance && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group indented\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"homeInsurance\",\n                children: \"Annual Insurance ($)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1119,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"homeInsurance\",\n                value: housingData.homeInsurance,\n                onChange: e => handleHousingChange('homeInsurance', e.target.value),\n                type: \"text\",\n                placeholder: \"e.g. 1200\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1120,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                children: \"The average annual home insurance cost is $1,200\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1127,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1118,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1078,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCalculate,\n          className: \"calculate-btn\",\n          children: activeTab === 'what-can-i-afford' ? 'Calculate What I Can Afford' : 'Analyze This Home'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 878,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calculator-results\",\n        children: [results ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Results Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"affordability-visual\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Mortgage Impact on Monthly Budget\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"affordability-meter\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"meter-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Monthly Gross Income: \", formatCurrency(results.monthlyGrossIncome)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1153,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: results.affordabilityClass,\n                  children: [results.percentOfGrossIncome.toFixed(1), \"% of Income\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1154,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"meter-bar\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `meter-fill ${results.affordabilityClass}`,\n                  style: {\n                    width: `${Math.min(results.percentOfGrossIncome * 2, 100)}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1159,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1158,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"meter-labels\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"0%\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1165,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"green\",\n                  children: \"28%\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1166,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"yellow\",\n                  children: \"32%\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1167,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"50%\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1168,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1164,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"affordability-note\",\n                children: results.hasDebts ? /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Using the 36% rule (with debts): green \\u2264 36%, yellow 36%-42%, red > 42%\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1172,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Using the 28% rule (no debts): green \\u2264 28%, yellow 28%-32%, red > 32%\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1174,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1170,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"result-summary\",\n            children: activeTab === 'what-can-i-afford' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-item total\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Maximum Home Price:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1185,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"highlight\",\n                  children: formatCurrency(results.maxHomePrice)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1186,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1184,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"result-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"Down Payment (\", results.downPaymentPercent.toFixed(1), \"%):\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1193,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: formatCurrency(results.downPaymentAmount)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1194,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1192,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"result-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Loan Amount:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1200,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: formatCurrency(results.maxLoanAmount)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1201,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1199,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1191,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `result-item total ${results.isAffordable ? \"affordable\" : \"unaffordable\"}`,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Affordability:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1210,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: results.isAffordable ? \"✓ Affordable\" : \"⚠️ May be too expensive\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1211,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1209,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"result-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Home Price:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1220,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: formatCurrency(results.homePrice)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1221,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1219,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"result-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Loan Amount:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1227,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: formatCurrency(results.loanAmount)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1228,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1226,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1218,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"payment-breakdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Monthly Payment Breakdown\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1239,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"payment-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Principal & Interest:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1243,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: formatCurrency(results.baseMonthlyPayment)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1244,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1242,\n                columnNumber: 19\n              }, this), results.monthlyPropertyTax > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Property Tax:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1251,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: formatCurrency(results.monthlyPropertyTax)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1252,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1250,\n                columnNumber: 21\n              }, this), results.monthlyInsurance > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Home Insurance:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1260,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: formatCurrency(results.monthlyInsurance)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1261,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1259,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-item total\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Total Monthly Payment:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1268,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: formatCurrency(results.totalMonthlyPayment)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1269,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1267,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1241,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1238,\n            columnNumber: 15\n          }, this), paymentsByTerm && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"term-comparison\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Payment Options by Term\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1279,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"term-options\",\n              children: Object.entries(paymentsByTerm).map(([term, data]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `term-option ${data.affordabilityClass}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"term-header\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [term, \" Year \", term === '30' ? '(selected)' : '']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1285,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"term-payment\",\n                    children: [formatCurrency(data.totalPayment), \"/mo\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1286,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1284,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"term-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"term-detail\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Rate:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1291,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [data.interestRate.toFixed(2), \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1292,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1290,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"term-detail\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"% of Gross Income:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1296,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [data.percentOfGrossIncome.toFixed(1), \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1297,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1295,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"term-detail\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Total Interest:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1303,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(data.totalInterest)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1304,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1302,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1289,\n                  columnNumber: 25\n                }, this)]\n              }, term, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1283,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1281,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1278,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"financial-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowDetailedResults(!showDetailedResults),\n              className: \"toggle-details\",\n              children: showDetailedResults ? \"Hide Financial Details\" : \"Show Financial Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1315,\n              columnNumber: 17\n            }, this), showDetailedResults && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"detailed-results\",\n              children: [!incomeData.useCustomTakeHome && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tax-summary\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Tax Summary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1327,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tax-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Annual Income:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1330,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.annualIncome)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1331,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1329,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Federal Tax:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1337,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.federalTax)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1338,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1336,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"FICA (Social Security & Medicare):\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1344,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.ficaTax)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1345,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1343,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"State Tax:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1351,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.stateTax)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1352,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1350,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item total\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Total Tax:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1358,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.totalTax)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1359,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1357,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Effective Tax Rate:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1365,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [results.effectiveTaxRate.toFixed(1), \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1366,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1364,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1328,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1326,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"budget-summary\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Monthly Budget\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1376,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"budget-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item total\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Monthly Gross Income:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1379,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.monthlyGrossIncome)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1380,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1378,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Monthly Take-Home Pay:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1386,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.monthlyTakeHome)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1387,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1385,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Mortgage Payment:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1393,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.totalMonthlyPayment)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1394,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1392,\n                    columnNumber: 25\n                  }, this), results.monthlyDebts > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Other Debt Payments:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1401,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.monthlyDebts)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1402,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1400,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-item total\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Take-Home Remaining:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1409,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: formatCurrency(results.monthlyTakeHome - results.totalMonthlyPayment - results.monthlyDebts)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1410,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1408,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1377,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1375,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1323,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1314,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-results\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Complete the form and calculate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1422,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Fill in your income and basic mortgage details to see what home price you can afford or analyze a specific home price.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1423,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1421,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guidelines\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Affordability Guidelines: The 28/36 Rule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1432,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"28% Rule:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1435,\n                columnNumber: 17\n              }, this), \" Your monthly housing payment (PITI: Principal, Interest, Taxes, Insurance) should not exceed 28% of your gross monthly income.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1434,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"36% Rule:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1438,\n                columnNumber: 17\n              }, this), \" Your total monthly debt payments (including housing) should not exceed 36% of your gross monthly income.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1437,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Important:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1441,\n                columnNumber: 17\n              }, this), \" These are industry guidelines used by lenders to determine how much you can borrow. Your personal comfort level may differ.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1440,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1433,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1431,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 850,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeAffordabilityCalculator, \"3XB6F72om5Dbw2IdSJVnEYhh+2g=\");\n_c = HomeAffordabilityCalculator;\nexport default HomeAffordabilityCalculator;\nvar _c;\n$RefreshReg$(_c, \"HomeAffordabilityCalculator\");","map":{"version":3,"names":["React","useState","useEffect","INDIANA_COUNTIES","MARYLAND_COUNTIES","MICHIGAN_CITIES","calculateMichiganLocalTax","MISSOURI_CITIES","NEW_JERSEY_CITIES","NEW_YORK_TAX","calculateNYTax","OHIO_MUNICIPALITIES","OREGON_TAX","PENNSYLVANIA_TAX","WEST_VIRGINIA_TAX","STATE_TAX_DATA","jsxDEV","_jsxDEV","Fragment","_Fragment","calculateMonthlyMortgage","homePrice","downPayment","interestRate","loanTermYears","loanAmount","monthlyInterestRate","numberOfPayments","monthlyPayment","Math","pow","calculateMaxHomePrice","monthlyGrossIncome","monthlyDebts","maxMonthlyPaymentPercent","maxMonthlyPayment","maxLoanAmount","maxHomePrice","formatCurrency","value","Intl","NumberFormat","style","currency","maximumFractionDigits","format","formatPercentage","toFixed","FEDERAL_TAX_BRACKETS","limit","rate","Infinity","FICA_RATES","socialSecurity","medicare","additionalMedicare","socialSecurityWageCap","STATE_TAX_RATES","DEFAULT_INTEREST_RATES","convertToAnnualIncome","income","payType","numericIncome","parseFloat","isNaN","calculateProgressiveTax","brackets","tax","remainingIncome","previousLimit","i","length","currentBracket","bracketIncome","min","calculateFICATax","socialSecurityTax","medicareTax","total","calculateFederalTax","calculateStateTax","state","calculateTotalTax","federalTax","ficaTaxes","stateTax","federal","fica","ficaSocialSecurity","ficaMedicare","effectiveRate","getAffordabilityColorClass","percentage","hasDebts","HomeAffordabilityCalculator","_s","incomeData","setIncomeData","useCustomTakeHome","monthlyTakeHome","housingData","setHousingData","downPaymentType","downPaymentPercent","downPaymentAmount","includePropertyTax","propertyTaxRate","includeHomeInsurance","homeInsurance","financialData","setFinancialData","errors","setErrors","results","setResults","activeTab","setActiveTab","showDetailedResults","setShowDetailedResults","showAdvancedOptions","setShowAdvancedOptions","paymentsByTerm","setPaymentsByTerm","term","parseInt","defaultRate","prev","percent","amount","handleIncomeChange","field","handleHousingChange","handleFinancialChange","handleDownPaymentTypeChange","type","validateForm","newErrors","Object","keys","calculateAffordability","annualIncome","taxResults","takeHomePay","frontEndMaxPayment","backEndMaxPayment","additionalHousingCosts","annualInsurance","maxPIPayment","general","fixedDownPayment","maxLoanPayment","baseMonthlyPayment","totalMonthlyPayment","monthlyPropertyTax","monthlyInsurance","termOptions","paymentOptions","forEach","termInterestRate","termPayment","totalTermPayment","totalInterest","percentOfGrossIncome","loanTerm","principalAndInterest","totalPayment","percentOfTakeHome","isAffordable","affordabilityClass","affordabilityResults","ficaTax","totalTax","effectiveTaxRate","maxMonthlyPIPayment","maxMonthlyAllPayment","percentOfTakeHomePay","error","console","analyzeSpecificHome","termPercentOfGrossIncome","handleCalculate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","checked","onChange","e","target","htmlFor","placeholder","sort","map","width","entries","data","_c","$RefreshReg$"],"sources":["/Users/elizabethrichardson/taxcalc/src/components/HomeAffordabilityCalculator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TaxCalculator.css';\nimport { INDIANA_COUNTIES } from '../data/indianaTaxData';\nimport { MARYLAND_COUNTIES } from '../data/marylandTaxData';\nimport { MICHIGAN_CITIES, calculateMichiganLocalTax } from '../data/michiganTaxData';\nimport { MISSOURI_CITIES } from '../data/missouriTaxData';\nimport { NEW_JERSEY_CITIES } from '../data/newJerseyTaxData';\nimport { NEW_YORK_TAX, calculateNYTax } from '../data/newYorkTaxData';\nimport { OHIO_MUNICIPALITIES } from '../data/ohioTaxData';\nimport { OREGON_TAX } from '../data/oregon-tax';\nimport { PENNSYLVANIA_TAX } from '../data/pennsylvaniaTaxData';\nimport { WEST_VIRGINIA_TAX } from '../data/westVirginiaTaxData';\nimport { STATE_TAX_DATA } from '../data/tax-data';\n\n// Utility functions\nconst calculateMonthlyMortgage = (homePrice, downPayment, interestRate, loanTermYears) => {\n  // Calculate loan amount\n  const loanAmount = homePrice - downPayment;\n  \n  // Convert annual interest rate to monthly and decimal form\n  const monthlyInterestRate = (interestRate / 100) / 12;\n  \n  // Calculate number of payments\n  const numberOfPayments = loanTermYears * 12;\n  \n  // Avoid division by zero for 0% interest\n  if (monthlyInterestRate === 0) {\n    return loanAmount / numberOfPayments;\n  }\n  \n  // Use mortgage payment formula: M = P * (r * (1 + r)^n) / ((1 + r)^n - 1)\n  const monthlyPayment = loanAmount * \n    (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)) / \n    (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1);\n  \n  return monthlyPayment;\n};\n\n// Calculate maximum home price based on gross income\nconst calculateMaxHomePrice = (monthlyGrossIncome, interestRate, loanTermYears, downPayment, monthlyDebts = 0) => {\n  // Maximum payment based on whether there are debts included\n  // If debts included, use 36% rule (minus debts), otherwise use 28% rule\n  const maxMonthlyPaymentPercent = monthlyDebts > 0 ? 0.36 : 0.28;\n  const maxMonthlyPayment = (monthlyGrossIncome * maxMonthlyPaymentPercent) - monthlyDebts;\n  \n  if (maxMonthlyPayment <= 0) return 0;\n  \n  // Convert annual interest rate to monthly\n  const monthlyInterestRate = (interestRate / 100) / 12;\n  \n  // Number of payments\n  const numberOfPayments = loanTermYears * 12;\n  \n  // Avoid division by zero for 0% interest\n  if (monthlyInterestRate === 0) {\n    const maxLoanAmount = maxMonthlyPayment * numberOfPayments;\n    return maxLoanAmount + downPayment;\n  }\n  \n  // Calculate maximum loan amount\n  // Using formula: P = pmt * (1 - (1 + r)^-n) / r\n  const maxLoanAmount = maxMonthlyPayment * \n    (1 - Math.pow(1 + monthlyInterestRate, -numberOfPayments)) / \n    monthlyInterestRate;\n  \n  // Calculate max home price (loan amount + down payment)\n  const maxHomePrice = maxLoanAmount + downPayment;\n  \n  return maxHomePrice;\n};\n\n// Format currency for display\nconst formatCurrency = (value) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    maximumFractionDigits: 0\n  }).format(value);\n};\n\n// Format percentage for display\nconst formatPercentage = (value) => {\n  return value.toFixed(1) + '%';\n};\n\n// Federal Tax Brackets 2024\nconst FEDERAL_TAX_BRACKETS = [\n  { limit: 11600, rate: 0.10 },\n  { limit: 47150, rate: 0.12 },\n  { limit: 100525, rate: 0.22 },\n  { limit: 191950, rate: 0.24 },\n  { limit: 243725, rate: 0.32 },\n  { limit: 609350, rate: 0.35 },\n  { limit: Infinity, rate: 0.37 }\n];\n\n// FICA rates\nconst FICA_RATES = {\n  socialSecurity: 0.062,  // 6.2%\n  medicare: 0.0145,      // 1.45%\n  additionalMedicare: 0.009, // 0.9% additional Medicare tax for high earners\n  socialSecurityWageCap: 168600 // 2024 wage cap for Social Security tax\n};\n\n// State tax rates (simplified)\nconst STATE_TAX_RATES = {\n  \"Alabama\": 0.05,\n  \"Alaska\": 0.00,\n  \"Arizona\": 0.025,\n  \"Arkansas\": 0.039,\n  \"California\": 0.095,\n  \"Colorado\": 0.044,\n  \"Connecticut\": 0.0699,\n  \"Delaware\": 0.066,\n  \"Florida\": 0.00,\n  \"Georgia\": 0.0539,\n  \"Hawaii\": 0.11,\n  \"Idaho\": 0.059,\n  \"Illinois\": 0.049,\n  \"Indiana\": 0.03,\n  \"Iowa\": 0.038,\n  \"Kansas\": 0.055,\n  \"Kentucky\": 0.04,\n  \"Louisiana\": 0.03,\n  \"Maine\": 0.071,\n  \"Maryland\": 0.057,\n  \"Massachusetts\": 0.09,\n  \"Michigan\": 0.042,\n  \"Minnesota\": 0.098,\n  \"Mississippi\": 0.044,\n  \"Missouri\": 0.047,\n  \"Montana\": 0.059,\n  \"Nebraska\": 0.052,\n  \"Nevada\": 0.00,\n  \"New Hampshire\": 0.05,\n  \"New Jersey\": 0.057,\n  \"New Mexico\": 0.059,\n  \"New York\": 0.065,\n  \"North Carolina\": 0.0425,\n  \"North Dakota\": 0.025,\n  \"Ohio\": 0.035,\n  \"Oklahoma\": 0.0475,\n  \"Oregon\": 0.099,\n  \"Pennsylvania\": 0.0307,\n  \"Rhode Island\": 0.0599,\n  \"South Carolina\": 0.062,\n  \"South Dakota\": 0.00,\n  \"Tennessee\": 0.00,\n  \"Texas\": 0.00,\n  \"Utah\": 0.0455,\n  \"Vermont\": 0.0875,\n  \"Virginia\": 0.0575,\n  \"Washington\": 0.00,\n  \"West Virginia\": 0.0482,\n  \"Wisconsin\": 0.0765,\n  \"Wyoming\": 0.00\n};\n\n// Default interest rates by term\nconst DEFAULT_INTEREST_RATES = {\n  10: 5.84,\n  15: 5.96,\n  30: 6.5\n};\n\n// Convert various income types to annual\nconst convertToAnnualIncome = (income, payType) => {\n  const numericIncome = parseFloat(income);\n  \n  if (isNaN(numericIncome)) return 0;\n  \n  switch (payType) {\n    case 'hourly':\n      return numericIncome * 40 * 52; // 40 hours per week, 52 weeks per year\n    case 'weekly':\n      return numericIncome * 52;\n    case 'biweekly':\n      return numericIncome * 26;\n    case 'monthly':\n      return numericIncome * 12;\n    case 'annual':\n    default:\n      return numericIncome;\n  }\n};\n\n// Calculate progressive tax (like federal income tax)\nconst calculateProgressiveTax = (income, brackets) => {\n  let tax = 0;\n  let remainingIncome = income;\n  let previousLimit = 0;\n  \n  for (let i = 0; i < brackets.length; i++) {\n    const currentBracket = brackets[i];\n    \n    // Calculate income in this bracket\n    const bracketIncome = Math.min(\n      remainingIncome,\n      currentBracket.limit - previousLimit\n    );\n    \n    if (bracketIncome <= 0) break;\n    \n    tax += bracketIncome * currentBracket.rate;\n    remainingIncome -= bracketIncome;\n    previousLimit = currentBracket.limit;\n    \n    if (remainingIncome <= 0) break;\n  }\n  \n  return tax;\n};\n\n// Calculate FICA taxes (Social Security and Medicare)\nconst calculateFICATax = (income) => {\n  const { socialSecurity, medicare, additionalMedicare, socialSecurityWageCap } = FICA_RATES;\n  \n  // Social Security has a wage cap\n  const socialSecurityTax = Math.min(income, socialSecurityWageCap) * socialSecurity;\n  \n  // Regular Medicare tax\n  let medicareTax = income * medicare;\n  \n  // Additional Medicare tax for high earners (over $200,000)\n  if (income > 200000) {\n    medicareTax += (income - 200000) * additionalMedicare;\n  }\n  \n  return {\n    socialSecurity: socialSecurityTax,\n    medicare: medicareTax,\n    total: socialSecurityTax + medicareTax\n  };\n};\n\n// Calculate federal tax\nconst calculateFederalTax = (income) => {\n  return calculateProgressiveTax(income, FEDERAL_TAX_BRACKETS);\n};\n\n// Calculate state tax (simplified)\nconst calculateStateTax = (income, state) => {\n  if (!state || !STATE_TAX_RATES[state]) return 0;\n  return income * STATE_TAX_RATES[state];\n};\n\n// Calculate total tax burden\nconst calculateTotalTax = (income, state) => {\n  const federalTax = calculateFederalTax(income);\n  const ficaTaxes = calculateFICATax(income);\n  const stateTax = calculateStateTax(income, state);\n  \n  return {\n    federal: federalTax,\n    fica: ficaTaxes.total,\n    ficaSocialSecurity: ficaTaxes.socialSecurity,\n    ficaMedicare: ficaTaxes.medicare,\n    state: stateTax,\n    total: federalTax + ficaTaxes.total + stateTax,\n    effectiveRate: (federalTax + ficaTaxes.total + stateTax) / income\n  };\n};\n\n// Get affordability color class based on income percentage and debt situation\nconst getAffordabilityColorClass = (percentage, hasDebts) => {\n  if (hasDebts) {\n    // Using 36% rule with debts\n    if (percentage <= 36) return \"green\";\n    if (percentage <= 42) return \"yellow\";\n    return \"red\";\n  } else {\n    // Using 28% rule without debts\n    if (percentage <= 28) return \"green\";\n    if (percentage <= 32) return \"yellow\";\n    return \"red\";\n  }\n};\n\nconst HomeAffordabilityCalculator = () => {\n  // Income and tax state\n  const [incomeData, setIncomeData] = useState({\n    income: '',\n    payType: 'annual',\n    state: '',\n    useCustomTakeHome: false,\n    monthlyTakeHome: ''\n  });\n\n  // Housing state\n  const [housingData, setHousingData] = useState({\n    homePrice: '',\n    downPaymentType: 'percent', // 'percent' or 'amount'\n    downPaymentPercent: '20',\n    downPaymentAmount: '',\n    loanTermYears: '30',\n    includePropertyTax: true,\n    propertyTaxRate: '1.1',\n    includeHomeInsurance: true,\n    homeInsurance: '1200'\n  });\n\n  // Additional financial details\n  const [financialData, setFinancialData] = useState({\n    monthlyDebts: ''\n  });\n\n  // Results and UI state\n  const [errors, setErrors] = useState({});\n  const [results, setResults] = useState(null);\n  const [activeTab, setActiveTab] = useState('what-can-i-afford');\n  const [showDetailedResults, setShowDetailedResults] = useState(false);\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const [paymentsByTerm, setPaymentsByTerm] = useState(null);\n\n  // Set interest rate based on loan term\n  useEffect(() => {\n    const term = parseInt(housingData.loanTermYears, 10);\n    const defaultRate = DEFAULT_INTEREST_RATES[term] || DEFAULT_INTEREST_RATES[30];\n    setHousingData(prev => ({ ...prev, interestRate: defaultRate }));\n  }, [housingData.loanTermYears]);\n\n  // Calculate down payment amount when percent changes\n  useEffect(() => {\n    if (housingData.downPaymentType === 'percent' && housingData.homePrice) {\n      const homePrice = parseFloat(housingData.homePrice);\n      const percent = parseFloat(housingData.downPaymentPercent);\n      if (!isNaN(homePrice) && !isNaN(percent)) {\n        const amount = homePrice * (percent / 100);\n        setHousingData(prev => ({ \n          ...prev, \n          downPaymentAmount: amount.toFixed(0)\n        }));\n      }\n    }\n  }, [housingData.downPaymentPercent, housingData.homePrice, housingData.downPaymentType]);\n\n  // Calculate down payment percent when amount changes\n  useEffect(() => {\n    if (housingData.downPaymentType === 'amount' && housingData.homePrice) {\n      const homePrice = parseFloat(housingData.homePrice);\n      const amount = parseFloat(housingData.downPaymentAmount);\n      if (!isNaN(homePrice) && !isNaN(amount) && homePrice > 0) {\n        const percent = (amount / homePrice) * 100;\n        setHousingData(prev => ({ \n          ...prev, \n          downPaymentPercent: percent.toFixed(1)\n        }));\n      }\n    }\n  }, [housingData.downPaymentAmount, housingData.homePrice, housingData.downPaymentType]);\n\n  // Handle changes to income data\n  const handleIncomeChange = (field, value) => {\n    setIncomeData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Handle changes to housing data\n  const handleHousingChange = (field, value) => {\n    setHousingData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Handle changes to financial data\n  const handleFinancialChange = (field, value) => {\n    setFinancialData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Switch between percentage and amount for down payment\n  const handleDownPaymentTypeChange = (type) => {\n    setHousingData(prev => ({\n      ...prev,\n      downPaymentType: type\n    }));\n  };\n\n  // Validate the input form\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!incomeData.useCustomTakeHome) {\n      // Validate income inputs\n      if (!incomeData.income) {\n        newErrors.income = 'Income is required';\n      } else if (isNaN(parseFloat(incomeData.income)) || parseFloat(incomeData.income) <= 0) {\n        newErrors.income = 'Please enter a valid income amount';\n      }\n\n      if (!incomeData.state) {\n        newErrors.state = 'State selection is required for tax calculation';\n      }\n    } else {\n      // Validate custom take-home pay\n      if (!incomeData.monthlyTakeHome) {\n        newErrors.monthlyTakeHome = 'Monthly take-home pay is required';\n      } else if (isNaN(parseFloat(incomeData.monthlyTakeHome)) || parseFloat(incomeData.monthlyTakeHome) <= 0) {\n        newErrors.monthlyTakeHome = 'Please enter a valid monthly take-home amount';\n      }\n    }\n\n    // If we're analyzing a specific home, validate home price\n    if (activeTab === 'analyze-mortgage' && !housingData.homePrice) {\n      newErrors.homePrice = 'Home price is required';\n    } else if (activeTab === 'analyze-mortgage' && (isNaN(parseFloat(housingData.homePrice)) || parseFloat(housingData.homePrice) <= 0)) {\n      newErrors.homePrice = 'Please enter a valid home price';\n    }\n\n    // Validate down payment\n    if (housingData.downPaymentType === 'percent') {\n      if (!housingData.downPaymentPercent || isNaN(parseFloat(housingData.downPaymentPercent)) || \n          parseFloat(housingData.downPaymentPercent) < 0 || parseFloat(housingData.downPaymentPercent) > 100) {\n        newErrors.downPaymentPercent = 'Down payment must be between 0% and 100%';\n      }\n    } else {\n      if (!housingData.downPaymentAmount || isNaN(parseFloat(housingData.downPaymentAmount)) || parseFloat(housingData.downPaymentAmount) < 0) {\n        newErrors.downPaymentAmount = 'Please enter a valid down payment amount';\n      }\n    }\n\n    // Validate optional financial data\n    if (financialData.monthlyDebts && (isNaN(parseFloat(financialData.monthlyDebts)) || parseFloat(financialData.monthlyDebts) < 0)) {\n      newErrors.monthlyDebts = 'Please enter a valid monthly debt amount';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Calculate affordability (what can I afford)\n  const calculateAffordability = () => {\n    if (!validateForm()) return;\n\n    try {\n      let annualIncome = 0;\n      let monthlyGrossIncome = 0;\n      let monthlyTakeHome = 0;\n      let taxResults = { total: 0, federal: 0, fica: 0, state: 0, effectiveRate: 0 };\n      \n      // Calculate gross income and taxes\n      if (!incomeData.useCustomTakeHome) {\n        // Convert to annual income and calculate taxes\n        annualIncome = convertToAnnualIncome(incomeData.income, incomeData.payType);\n        taxResults = calculateTotalTax(annualIncome, incomeData.state);\n        monthlyGrossIncome = annualIncome / 12;\n        const takeHomePay = annualIncome - taxResults.total;\n        monthlyTakeHome = takeHomePay / 12;\n      } else {\n        // Use custom take-home pay and estimate gross (simplified)\n        monthlyTakeHome = parseFloat(incomeData.monthlyTakeHome);\n        // Estimate gross as approximately 130% of take-home (rough estimate)\n        monthlyGrossIncome = monthlyTakeHome * 1.3;\n        annualIncome = monthlyGrossIncome * 12;\n      }\n\n      // Parse other inputs\n      const monthlyDebts = parseFloat(financialData.monthlyDebts) || 0;\n      const hasDebts = monthlyDebts > 0;\n      const interestRate = parseFloat(housingData.interestRate);\n      const loanTermYears = parseInt(housingData.loanTermYears, 10);\n      \n      // Determine down payment based on type\n      let downPaymentPercent, downPaymentAmount;\n      if (housingData.downPaymentType === 'percent') {\n        downPaymentPercent = parseFloat(housingData.downPaymentPercent);\n        // Will calculate actual amount after we know max home price\n      } else {\n        downPaymentAmount = parseFloat(housingData.downPaymentAmount);\n        // Will use this fixed amount\n      }\n      \n      // Calculate affordability ratios\n      // Front-end ratio: 28% of monthly gross income for housing (PITI)\n      const frontEndMaxPayment = monthlyGrossIncome * 0.28;\n      // Back-end ratio: 36% of monthly gross income for all debt payments\n      const backEndMaxPayment = (monthlyGrossIncome * 0.36) - monthlyDebts;\n      // Use the more conservative of the two\n      const maxMonthlyPayment = Math.min(frontEndMaxPayment, backEndMaxPayment);\n      \n      // Adjust for property tax and insurance\n      let additionalHousingCosts = 0;\n      \n      if (housingData.includePropertyTax) {\n        const propertyTaxRate = parseFloat(housingData.propertyTaxRate) / 100;\n        // Will estimate with a placeholder value for now\n        additionalHousingCosts += (300000 * propertyTaxRate) / 12; // Placeholder home value\n      }\n      \n      if (housingData.includeHomeInsurance) {\n        const annualInsurance = parseFloat(housingData.homeInsurance) || 1200;\n        additionalHousingCosts += annualInsurance / 12;\n      }\n      \n      // Adjust max payment to account for property tax and insurance\n      const maxPIPayment = maxMonthlyPayment - additionalHousingCosts;\n      \n      if (maxPIPayment <= 0) {\n        setErrors({ \n          general: 'Your expenses and debts are too high relative to your income for a mortgage'\n        });\n        return;\n      }\n      \n      // Calculate max home price based on the down payment situation\n      let maxHomePrice, maxLoanAmount;\n      \n      if (housingData.downPaymentType === 'percent') {\n        // Percentage-based down payment\n        maxHomePrice = calculateMaxHomePrice(\n          monthlyGrossIncome,\n          interestRate,\n          loanTermYears,\n          0, // Temporarily use 0 for down payment\n          monthlyDebts\n        );\n        \n        // Now apply the down payment percentage\n        downPaymentAmount = maxHomePrice * (downPaymentPercent / 100);\n        maxLoanAmount = maxHomePrice - downPaymentAmount;\n      } else {\n        // Fixed amount down payment\n        // For fixed down payment, we need to calculate differently\n        const fixedDownPayment = parseFloat(housingData.downPaymentAmount);\n        \n        // Calculate max loan amount first\n        const maxLoanPayment = maxPIPayment;\n        const monthlyInterestRate = (interestRate / 100) / 12;\n        const numberOfPayments = loanTermYears * 12;\n        \n        if (monthlyInterestRate === 0) {\n          maxLoanAmount = maxLoanPayment * numberOfPayments;\n        } else {\n          maxLoanAmount = maxLoanPayment * \n            (1 - Math.pow(1 + monthlyInterestRate, -numberOfPayments)) / \n            monthlyInterestRate;\n        }\n        \n        // Then calculate max home price by adding fixed down payment\n        maxHomePrice = maxLoanAmount + fixedDownPayment;\n        downPaymentAmount = fixedDownPayment;\n        downPaymentPercent = (fixedDownPayment / maxHomePrice) * 100;\n      }\n      \n      // Calculate monthly mortgage payment\n      const baseMonthlyPayment = calculateMonthlyMortgage(\n        maxHomePrice,\n        downPaymentAmount,\n        interestRate,\n        loanTermYears\n      );\n      \n      // Calculate more precise property tax and insurance now that we know max home price\n      let totalMonthlyPayment = baseMonthlyPayment;\n      let monthlyPropertyTax = 0;\n      let monthlyInsurance = 0;\n      \n      if (housingData.includePropertyTax) {\n        const propertyTaxRate = parseFloat(housingData.propertyTaxRate) / 100;\n        monthlyPropertyTax = (maxHomePrice * propertyTaxRate) / 12;\n        totalMonthlyPayment += monthlyPropertyTax;\n      }\n      \n      if (housingData.includeHomeInsurance) {\n        const annualInsurance = parseFloat(housingData.homeInsurance) || 1200;\n        monthlyInsurance = annualInsurance / 12;\n        totalMonthlyPayment += monthlyInsurance;\n      }\n      \n      // Calculate payment options for different terms\n      const termOptions = [10, 15, 30];\n      const paymentOptions = {};\n      \n      termOptions.forEach(term => {\n        const termInterestRate = DEFAULT_INTEREST_RATES[term] || DEFAULT_INTEREST_RATES[30];\n        \n        const termPayment = calculateMonthlyMortgage(\n          maxHomePrice,\n          downPaymentAmount,\n          termInterestRate,\n          term\n        );\n        \n        let totalTermPayment = termPayment;\n        \n        if (housingData.includePropertyTax) {\n          totalTermPayment += monthlyPropertyTax;\n        }\n        \n        if (housingData.includeHomeInsurance) {\n          totalTermPayment += monthlyInsurance;\n        }\n        \n        const totalInterest = (termPayment * (term * 12)) - maxLoanAmount;\n        const percentOfGrossIncome = (totalTermPayment / monthlyGrossIncome) * 100;\n        \n        paymentOptions[term] = {\n          loanTerm: term,\n          interestRate: termInterestRate,\n          principalAndInterest: termPayment,\n          totalPayment: totalTermPayment,\n          totalInterest: totalInterest,\n          percentOfGrossIncome: percentOfGrossIncome,\n          percentOfTakeHome: (totalTermPayment / monthlyTakeHome) * 100,\n          isAffordable: hasDebts ? \n            percentOfGrossIncome <= 36 : \n            percentOfGrossIncome <= 28,\n          affordabilityClass: getAffordabilityColorClass(percentOfGrossIncome, hasDebts)\n        };\n      });\n      \n      setPaymentsByTerm(paymentOptions);\n      \n      // Create results object\n      const affordabilityResults = {\n        // Income details\n        annualIncome,\n        monthlyGrossIncome,\n        monthlyTakeHome,\n        \n        // Tax details\n        federalTax: taxResults.federal,\n        ficaTax: taxResults.fica,\n        ficaSocialSecurity: taxResults.ficaSocialSecurity,\n        ficaMedicare: taxResults.ficaMedicare,\n        stateTax: taxResults.state,\n        totalTax: taxResults.total,\n        effectiveTaxRate: taxResults.effectiveRate * 100,\n        \n        // Financial details\n        monthlyDebts,\n        hasDebts,\n        \n        // Affordability details\n        frontEndMaxPayment,\n        backEndMaxPayment,\n        maxMonthlyPIPayment: maxPIPayment,\n        maxMonthlyAllPayment: maxMonthlyPayment,\n        \n        // Mortgage details\n        maxHomePrice,\n        maxLoanAmount,\n        downPaymentAmount,\n        downPaymentPercent,\n        interestRate,\n        loanTermYears,\n        baseMonthlyPayment,\n        monthlyPropertyTax,\n        monthlyInsurance,\n        totalMonthlyPayment,\n        \n        // Percentages\n        percentOfGrossIncome: (totalMonthlyPayment / monthlyGrossIncome) * 100,\n        percentOfTakeHomePay: (totalMonthlyPayment / monthlyTakeHome) * 100,\n        isAffordable: hasDebts ? \n          ((totalMonthlyPayment / monthlyGrossIncome) * 100) <= 36 : \n          ((totalMonthlyPayment / monthlyGrossIncome) * 100) <= 28,\n        affordabilityClass: getAffordabilityColorClass(\n          (totalMonthlyPayment / monthlyGrossIncome) * 100, \n          hasDebts\n        )\n      };\n      \n      setResults(affordabilityResults);\n    } catch (error) {\n      console.error(\"Calculation error:\", error);\n      setErrors({ general: \"An error occurred during calculation. Please check your inputs.\" });\n    }\n  };\n\n  // Analyze a specific home price\n  const analyzeSpecificHome = () => {\n    if (!validateForm()) return;\n\n    try {\n      let annualIncome = 0;\n      let monthlyGrossIncome = 0;\n      let monthlyTakeHome = 0;\n      let taxResults = { total: 0, federal: 0, fica: 0, state: 0, effectiveRate: 0 };\n      \n      // Calculate income and taxes\n      if (!incomeData.useCustomTakeHome) {\n        // Convert to annual income and calculate taxes\n        annualIncome = convertToAnnualIncome(incomeData.income, incomeData.payType);\n        taxResults = calculateTotalTax(annualIncome, incomeData.state);\n        monthlyGrossIncome = annualIncome / 12;\n        const takeHomePay = annualIncome - taxResults.total;\n        monthlyTakeHome = takeHomePay / 12;\n      } else {\n        // Use custom take-home pay\n        monthlyTakeHome = parseFloat(incomeData.monthlyTakeHome);\n        // Estimate gross as approximately 130% of take-home (rough estimate)\n        monthlyGrossIncome = monthlyTakeHome * 1.3;\n        annualIncome = monthlyGrossIncome * 12;\n      }\n\n      // Parse other inputs\n      const monthlyDebts = parseFloat(financialData.monthlyDebts) || 0;\n      const hasDebts = monthlyDebts > 0;\n      const interestRate = parseFloat(housingData.interestRate);\n      const loanTermYears = parseInt(housingData.loanTermYears, 10);\n      const homePrice = parseFloat(housingData.homePrice);\n      \n      // Determine down payment\n      let downPaymentAmount, downPaymentPercent;\n      if (housingData.downPaymentType === 'percent') {\n        downPaymentPercent = parseFloat(housingData.downPaymentPercent);\n        downPaymentAmount = homePrice * (downPaymentPercent / 100);\n      } else {\n        downPaymentAmount = parseFloat(housingData.downPaymentAmount);\n        downPaymentPercent = (downPaymentAmount / homePrice) * 100;\n      }\n      \n      // Calculate loan amount\n      const loanAmount = homePrice - downPaymentAmount;\n      \n      // Calculate monthly mortgage payment\n      const baseMonthlyPayment = calculateMonthlyMortgage(\n        homePrice,\n        downPaymentAmount,\n        interestRate,\n        loanTermYears\n      );\n      \n      // Calculate total monthly payment with taxes and insurance\n      let totalMonthlyPayment = baseMonthlyPayment;\n      let monthlyPropertyTax = 0;\n      let monthlyInsurance = 0;\n      \n      if (housingData.includePropertyTax) {\n        const propertyTaxRate = parseFloat(housingData.propertyTaxRate) / 100;\n        monthlyPropertyTax = (homePrice * propertyTaxRate) / 12;\n        totalMonthlyPayment += monthlyPropertyTax;\n      }\n      \n      if (housingData.includeHomeInsurance) {\n        const annualInsurance = parseFloat(housingData.homeInsurance) || 1200;\n        monthlyInsurance = annualInsurance / 12;\n        totalMonthlyPayment += monthlyInsurance;\n      }\n      \n      // Calculate affordability ratios\n      const percentOfGrossIncome = (totalMonthlyPayment / monthlyGrossIncome) * 100;\n      const percentOfTakeHomePay = (totalMonthlyPayment / monthlyTakeHome) * 100;\n      const isAffordable = hasDebts ? \n        percentOfGrossIncome <= 36 : \n        percentOfGrossIncome <= 28;\n      \n      // Calculate payment options for different terms\n      const termOptions = [10, 15, 30];\n      const paymentOptions = {};\n      \n      termOptions.forEach(term => {\n        const termInterestRate = DEFAULT_INTEREST_RATES[term] || DEFAULT_INTEREST_RATES[30];\n        \n        const termPayment = calculateMonthlyMortgage(\n          homePrice,\n          downPaymentAmount,\n          termInterestRate,\n          term\n        );\n        \n        let totalTermPayment = termPayment;\n        \n        if (housingData.includePropertyTax) {\n          totalTermPayment += monthlyPropertyTax;\n        }\n        \n        if (housingData.includeHomeInsurance) {\n          totalTermPayment += monthlyInsurance;\n        }\n        \n        const totalInterest = (termPayment * (term * 12)) - loanAmount;\n        const termPercentOfGrossIncome = (totalTermPayment / monthlyGrossIncome) * 100;\n        \n        paymentOptions[term] = {\n          loanTerm: term,\n          interestRate: termInterestRate,\n          principalAndInterest: termPayment,\n          totalPayment: totalTermPayment,\n          totalInterest: totalInterest,\n          percentOfGrossIncome: termPercentOfGrossIncome,\n          percentOfTakeHome: (totalTermPayment / monthlyTakeHome) * 100,\n          isAffordable: hasDebts ? \n            termPercentOfGrossIncome <= 36 : \n            termPercentOfGrossIncome <= 28,\n          affordabilityClass: getAffordabilityColorClass(termPercentOfGrossIncome, hasDebts)\n        };\n      });\n      \n      setPaymentsByTerm(paymentOptions);\n      \n      // Create results object\n      const affordabilityResults = {\n        // Income details\n        annualIncome,\n        monthlyGrossIncome,\n        monthlyTakeHome,\n        \n        // Tax details\n        federalTax: taxResults.federal,\n        ficaTax: taxResults.fica,\n        ficaSocialSecurity: taxResults.ficaSocialSecurity,\n        ficaMedicare: taxResults.ficaMedicare,\n        stateTax: taxResults.state,\n        totalTax: taxResults.total,\n        effectiveTaxRate: taxResults.effectiveRate * 100,\n        \n        // Financial details\n        monthlyDebts,\n        hasDebts,\n        \n        // Mortgage details\n        homePrice,\n        loanAmount,\n        downPaymentAmount,\n        downPaymentPercent,\n        interestRate,\n        loanTermYears,\n        baseMonthlyPayment,\n        monthlyPropertyTax,\n        monthlyInsurance,\n        totalMonthlyPayment,\n        \n        // Affordability metrics\n        percentOfGrossIncome,\n        percentOfTakeHomePay,\n        isAffordable,\n        affordabilityClass: getAffordabilityColorClass(percentOfGrossIncome, hasDebts)\n      };\n      \n      setResults(affordabilityResults);\n    } catch (error) {\n      console.error(\"Calculation error:\", error);\n      setErrors({ general: \"An error occurred during calculation. Please check your inputs.\" });\n    }\n  };\n\n  const handleCalculate = () => {\n    if (activeTab === 'what-can-i-afford') {\n      calculateAffordability();\n    } else {\n      analyzeSpecificHome();\n    }\n  };\n\n  return (\n    <div className=\"tax-calculator\">\n      <h2>Home Affordability Calculator</h2>\n      <p>Find your ideal home price based on your income and financial situation</p>\n      \n      {/* Tabs for calculator modes */}\n      <div className=\"calculator-tabs\">\n        <button \n          className={`tab-button ${activeTab === 'what-can-i-afford' ? 'active' : ''}`}\n          onClick={() => setActiveTab('what-can-i-afford')}\n        >\n          What Can I Afford?\n        </button>\n        <button \n          className={`tab-button ${activeTab === 'analyze-mortgage' ? 'active' : ''}`}\n          onClick={() => setActiveTab('analyze-mortgage')}\n        >\n          Analyze a Home Price\n        </button>\n      </div>\n      \n      {errors.general && (\n        <div className=\"error-message\">\n          <p>{errors.general}</p>\n        </div>\n      )}\n      \n      <div className=\"calculator-grid\">\n        {/* Left Column - Input Form */}\n        <div className=\"calculator-inputs\">\n          {/* Income Section */}\n          <div className=\"form-section\">\n            <h3>Income Information</h3>\n            \n            <div className=\"form-group toggle\">\n              <input\n                type=\"checkbox\"\n                id=\"useCustomTakeHome\"\n                checked={incomeData.useCustomTakeHome}\n                onChange={(e) => handleIncomeChange('useCustomTakeHome', e.target.checked)}\n              />\n              <label htmlFor=\"useCustomTakeHome\">\n                I know my monthly take-home pay (after taxes)\n              </label>\n            </div>\n            \n            {!incomeData.useCustomTakeHome ? (\n              <>\n                <div className=\"form-group\">\n                  <label htmlFor=\"income\">Income</label>\n                  <div className=\"input-group\">\n                    <input\n                      id=\"income\"\n                      value={incomeData.income}\n                      onChange={(e) => handleIncomeChange('income', e.target.value)}\n                      type=\"text\"\n                      placeholder=\"e.g. 75000\"\n                      className={errors.income ? \"error-input\" : \"\"}\n                    />\n                    <select\n                      value={incomeData.payType}\n                      onChange={(e) => handleIncomeChange('payType', e.target.value)}\n                    >\n                      <option value=\"hourly\">Hourly</option>\n                      <option value=\"weekly\">Weekly</option>\n                      <option value=\"biweekly\">Bi-Weekly</option>\n                      <option value=\"monthly\">Monthly</option>\n                      <option value=\"annual\">Annual</option>\n                    </select>\n                  </div>\n                  {errors.income && <p className=\"error\">{errors.income}</p>}\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"state\">State</label>\n                  <select\n                    id=\"state\"\n                    value={incomeData.state}\n                    onChange={(e) => handleIncomeChange('state', e.target.value)}\n                    className={errors.state ? \"error-input\" : \"\"}\n                  >\n                    <option value=\"\">Select state</option>\n                    {Object.keys(STATE_TAX_RATES).sort().map(state => (\n                      <option key={state} value={state}>{state}</option>\n                    ))}\n                  </select>\n                  {errors.state && <p className=\"error\">{errors.state}</p>}\n                </div>\n              </>\n            ) : (\n              <div className=\"form-group\">\n                <label htmlFor=\"monthlyTakeHome\">Monthly Take-Home Pay</label>\n                <input\n                  id=\"monthlyTakeHome\"\n                  value={incomeData.monthlyTakeHome}\n                  onChange={(e) => handleIncomeChange('monthlyTakeHome', e.target.value)}\n                  type=\"text\"\n                  placeholder=\"e.g. 4500\"\n                  className={errors.monthlyTakeHome ? \"error-input\" : \"\"}\n                />\n                {errors.monthlyTakeHome && <p className=\"error\">{errors.monthlyTakeHome}</p>}\n                <small>Enter your monthly income after taxes and deductions</small>\n              </div>\n            )}\n          </div>\n          \n          {/* Financial Details */}\n          <div className=\"form-section\">\n            <h3>Financial Details</h3>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"monthlyDebts\">Monthly Debt Payments ($)</label>\n              <input\n                id=\"monthlyDebts\"\n                value={financialData.monthlyDebts}\n                onChange={(e) => handleFinancialChange('monthlyDebts', e.target.value)}\n                type=\"text\"\n                placeholder=\"e.g. 500\"\n                className={errors.monthlyDebts ? \"error-input\" : \"\"}\n              />\n              {errors.monthlyDebts && <p className=\"error\">{errors.monthlyDebts}</p>}\n              <small>Car loans, student loans, credit cards, etc.</small>\n            </div>\n          </div>\n\n          {/* Housing Details */}\n          <div className=\"form-section\">\n            <div className=\"section-header\">\n              <h3>Mortgage Details</h3>\n              <button \n                onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}\n                className=\"toggle-button\"\n              >\n                {showAdvancedOptions ? \"Hide Advanced\" : \"Show Advanced\"}\n              </button>\n            </div>\n            \n            {activeTab === 'analyze-mortgage' && (\n              <div className=\"form-group\">\n                <label htmlFor=\"homePrice\">Home Price</label>\n                <input\n                  id=\"homePrice\"\n                  value={housingData.homePrice}\n                  onChange={(e) => handleHousingChange('homePrice', e.target.value)}\n                  type=\"text\"\n                  placeholder=\"e.g. 350000\"\n                  className={errors.homePrice ? \"error-input\" : \"\"}\n                />\n                {errors.homePrice && <p className=\"error\">{errors.homePrice}</p>}\n              </div>\n            )}\n            \n            <div className=\"form-group\">\n              <label>Down Payment</label>\n              <div className=\"down-payment-toggle\">\n                <button \n                  className={`toggle-option ${housingData.downPaymentType === 'percent' ? 'active' : ''}`}\n                  onClick={() => handleDownPaymentTypeChange('percent')}\n                >\n                  Percentage\n                </button>\n                <button \n                  className={`toggle-option ${housingData.downPaymentType === 'amount' ? 'active' : ''}`}\n                  onClick={() => handleDownPaymentTypeChange('amount')}\n                >\n                  Amount\n                </button>\n              </div>\n              \n              {housingData.downPaymentType === 'percent' ? (\n                <div className=\"input-group\">\n                  <input\n                    id=\"downPaymentPercent\"\n                    value={housingData.downPaymentPercent}\n                    onChange={(e) => handleHousingChange('downPaymentPercent', e.target.value)}\n                    type=\"text\"\n                    placeholder=\"e.g. 20\"\n                    className={errors.downPaymentPercent ? \"error-input\" : \"\"}\n                  />\n                  <span className=\"input-suffix\">%</span>\n                </div>\n              ) : (\n                <div className=\"input-group\">\n                  <span className=\"input-prefix\">$</span>\n                  <input\n                    id=\"downPaymentAmount\"\n                    value={housingData.downPaymentAmount}\n                    onChange={(e) => handleHousingChange('downPaymentAmount', e.target.value)}\n                    type=\"text\"\n                    placeholder=\"e.g. 70000\"\n                    className={errors.downPaymentAmount ? \"error-input\" : \"\"}\n                  />\n                </div>\n              )}\n              \n              {errors.downPaymentPercent && (\n                <p className=\"error\">{errors.downPaymentPercent}</p>\n              )}\n              {errors.downPaymentAmount && (\n                <p className=\"error\">{errors.downPaymentAmount}</p>\n              )}\n              \n              {housingData.downPaymentType === 'percent' && housingData.homePrice && (\n                <small>\n                  Down payment amount: {formatCurrency(housingData.downPaymentAmount || 0)}\n                </small>\n              )}\n              {housingData.downPaymentType === 'amount' && housingData.homePrice && (\n                <small>\n                  Down payment percentage: {formatPercentage(housingData.downPaymentPercent || 0)}\n                </small>\n              )}\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"loanTermYears\">Loan Term</label>\n              <select\n                id=\"loanTermYears\"\n                value={housingData.loanTermYears}\n                onChange={(e) => handleHousingChange('loanTermYears', e.target.value)}\n              >\n                <option value=\"10\">10 years ({DEFAULT_INTEREST_RATES[10]}%)</option>\n                <option value=\"15\">15 years ({DEFAULT_INTEREST_RATES[15]}%)</option>\n                <option value=\"30\">30 years ({DEFAULT_INTEREST_RATES[30]}%)</option>\n              </select>\n              <small>Interest rates based on current averages</small>\n            </div>\n            \n            {showAdvancedOptions && (\n              <div className=\"advanced-options\">\n                <div className=\"form-group toggle\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"includePropertyTax\"\n                    checked={housingData.includePropertyTax}\n                    onChange={(e) => handleHousingChange('includePropertyTax', e.target.checked)}\n                  />\n                  <label htmlFor=\"includePropertyTax\">\n                    Include property tax\n                  </label>\n                </div>\n                \n                {housingData.includePropertyTax && (\n                  <div className=\"form-group indented\">\n                    <label htmlFor=\"propertyTaxRate\">Property Tax Rate (%)</label>\n                    <input\n                      id=\"propertyTaxRate\"\n                      value={housingData.propertyTaxRate}\n                      onChange={(e) => handleHousingChange('propertyTaxRate', e.target.value)}\n                      type=\"text\"\n                      placeholder=\"e.g. 1.1\"\n                    />\n                    <small>The average property tax rate in the US is 1.1%</small>\n                  </div>\n                )}\n\n                <div className=\"form-group toggle\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"includeHomeInsurance\"\n                    checked={housingData.includeHomeInsurance}\n                    onChange={(e) => handleHousingChange('includeHomeInsurance', e.target.checked)}\n                  />\n                  <label htmlFor=\"includeHomeInsurance\">\n                    Include home insurance\n                  </label>\n                </div>\n                \n                {housingData.includeHomeInsurance && (\n                  <div className=\"form-group indented\">\n                    <label htmlFor=\"homeInsurance\">Annual Insurance ($)</label>\n                    <input\n                      id=\"homeInsurance\"\n                      value={housingData.homeInsurance}\n                      onChange={(e) => handleHousingChange('homeInsurance', e.target.value)}\n                      type=\"text\"\n                      placeholder=\"e.g. 1200\"\n                    />\n                    <small>The average annual home insurance cost is $1,200</small>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          <button \n            onClick={handleCalculate}\n            className=\"calculate-btn\"\n          >\n            {activeTab === 'what-can-i-afford' ? 'Calculate What I Can Afford' : 'Analyze This Home'}\n          </button>\n        </div>\n\n        {/* Right Column - Results */}\n        <div className=\"calculator-results\">\n          {results ? (\n            <div className=\"results\">\n              <h2>Results Summary</h2>\n\n              {/* Visual representation of mortgage as % of income */}\n              <div className=\"affordability-visual\">\n                <h3>Mortgage Impact on Monthly Budget</h3>\n                <div className=\"affordability-meter\">\n                  <div className=\"meter-header\">\n                    <span>Monthly Gross Income: {formatCurrency(results.monthlyGrossIncome)}</span>\n                    <span className={results.affordabilityClass}>\n                      {results.percentOfGrossIncome.toFixed(1)}% of Income\n                    </span>\n                  </div>\n                  <div className=\"meter-bar\">\n                    <div \n                      className={`meter-fill ${results.affordabilityClass}`} \n                      style={{width: `${Math.min(results.percentOfGrossIncome * 2, 100)}%`}}\n                    ></div>\n                  </div>\n                  <div className=\"meter-labels\">\n                    <span>0%</span>\n                    <span className=\"green\">28%</span>\n                    <span className=\"yellow\">32%</span>\n                    <span>50%</span>\n                  </div>\n                  <div className=\"affordability-note\">\n                    {results.hasDebts ? (\n                      <small>Using the 36% rule (with debts): green ≤ 36%, yellow 36%-42%, red > 42%</small>\n                    ) : (\n                      <small>Using the 28% rule (no debts): green ≤ 28%, yellow 28%-32%, red > 32%</small>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Affordability Summary */}\n              <div className=\"result-summary\">\n                {activeTab === 'what-can-i-afford' ? (\n                  <>\n                    <div className=\"result-item total\">\n                      <span>Maximum Home Price:</span>\n                      <span className=\"highlight\">\n                        {formatCurrency(results.maxHomePrice)}\n                      </span>\n                    </div>\n\n                    <div className=\"result-row\">\n                      <div className=\"result-item\">\n                        <span>Down Payment ({results.downPaymentPercent.toFixed(1)}%):</span>\n                        <span>\n                          {formatCurrency(results.downPaymentAmount)}\n                        </span>\n                      </div>\n\n                      <div className=\"result-item\">\n                        <span>Loan Amount:</span>\n                        <span>\n                          {formatCurrency(results.maxLoanAmount)}\n                        </span>\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  <>\n                    <div className={`result-item total ${results.isAffordable ? \"affordable\" : \"unaffordable\"}`}>\n                      <span>Affordability:</span>\n                      <span>\n                        {results.isAffordable \n                          ? \"✓ Affordable\" \n                          : \"⚠️ May be too expensive\"}\n                      </span>\n                    </div>\n\n                    <div className=\"result-row\">\n                      <div className=\"result-item\">\n                        <span>Home Price:</span>\n                        <span>\n                          {formatCurrency(results.homePrice)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"result-item\">\n                        <span>Loan Amount:</span>\n                        <span>\n                          {formatCurrency(results.loanAmount)}\n                        </span>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </div>\n\n              {/* Monthly Payment Breakdown */}\n              <div className=\"payment-breakdown\">\n                <h3>Monthly Payment Breakdown</h3>\n\n                <div className=\"payment-details\">\n                  <div className=\"result-item\">\n                    <span>Principal & Interest:</span>\n                    <span>\n                      {formatCurrency(results.baseMonthlyPayment)}\n                    </span>\n                  </div>\n\n                  {results.monthlyPropertyTax > 0 && (\n                    <div className=\"result-item\">\n                      <span>Property Tax:</span>\n                      <span>\n                        {formatCurrency(results.monthlyPropertyTax)}\n                      </span>\n                    </div>\n                  )}\n\n                  {results.monthlyInsurance > 0 && (\n                    <div className=\"result-item\">\n                      <span>Home Insurance:</span>\n                      <span>\n                        {formatCurrency(results.monthlyInsurance)}\n                      </span>\n                    </div>\n                  )}\n\n                  <div className=\"result-item total\">\n                    <span>Total Monthly Payment:</span>\n                    <span>\n                      {formatCurrency(results.totalMonthlyPayment)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Term comparison */}\n              {paymentsByTerm && (\n                <div className=\"term-comparison\">\n                  <h3>Payment Options by Term</h3>\n\n                  <div className=\"term-options\">\n                    {Object.entries(paymentsByTerm).map(([term, data]) => (\n                      <div key={term} className={`term-option ${data.affordabilityClass}`}>\n                        <div className=\"term-header\">\n                          <span>{term} Year {term === '30' ? '(selected)' : ''}</span>\n                          <span className=\"term-payment\">{formatCurrency(data.totalPayment)}/mo</span>\n                        </div>\n                        \n                        <div className=\"term-details\">\n                          <div className=\"term-detail\">\n                            <span>Rate:</span>\n                            <span>{data.interestRate.toFixed(2)}%</span>\n                          </div>\n                          \n                          <div className=\"term-detail\">\n                            <span>% of Gross Income:</span>\n                            <span>\n                              {data.percentOfGrossIncome.toFixed(1)}%\n                            </span>\n                          </div>\n                          \n                          <div className=\"term-detail\">\n                            <span>Total Interest:</span>\n                            <span>{formatCurrency(data.totalInterest)}</span>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Detailed Results Toggle Section */}\n              <div className=\"financial-details\">\n                <button\n                  onClick={() => setShowDetailedResults(!showDetailedResults)}\n                  className=\"toggle-details\"\n                >\n                  {showDetailedResults ? \"Hide Financial Details\" : \"Show Financial Details\"}\n                </button>\n\n                {showDetailedResults && (\n                  <div className=\"detailed-results\">\n                    {/* Tax Breakdown (if calculated from income) */}\n                    {!incomeData.useCustomTakeHome && (\n                      <div className=\"tax-summary\">\n                        <h3>Tax Summary</h3>\n                        <div className=\"tax-details\">\n                          <div className=\"result-item\">\n                            <span>Annual Income:</span>\n                            <span>\n                              {formatCurrency(results.annualIncome)}\n                            </span>\n                          </div>\n\n                          <div className=\"result-item\">\n                            <span>Federal Tax:</span>\n                            <span>\n                              {formatCurrency(results.federalTax)}\n                            </span>\n                          </div>\n\n                          <div className=\"result-item\">\n                            <span>FICA (Social Security & Medicare):</span>\n                            <span>\n                              {formatCurrency(results.ficaTax)}\n                            </span>\n                          </div>\n\n                          <div className=\"result-item\">\n                            <span>State Tax:</span>\n                            <span>\n                              {formatCurrency(results.stateTax)}\n                            </span>\n                          </div>\n\n                          <div className=\"result-item total\">\n                            <span>Total Tax:</span>\n                            <span>\n                              {formatCurrency(results.totalTax)}\n                            </span>\n                          </div>\n\n                          <div className=\"result-item\">\n                            <span>Effective Tax Rate:</span>\n                            <span>\n                              {results.effectiveTaxRate.toFixed(1)}%\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Monthly Budget Breakdown */}\n                    <div className=\"budget-summary\">\n                      <h3>Monthly Budget</h3>\n                      <div className=\"budget-details\">\n                        <div className=\"result-item total\">\n                          <span>Monthly Gross Income:</span>\n                          <span>\n                            {formatCurrency(results.monthlyGrossIncome)}\n                          </span>\n                        </div>\n                        \n                        <div className=\"result-item\">\n                          <span>Monthly Take-Home Pay:</span>\n                          <span>\n                            {formatCurrency(results.monthlyTakeHome)}\n                          </span>\n                        </div>\n\n                        <div className=\"result-item\">\n                          <span>Mortgage Payment:</span>\n                          <span>\n                            {formatCurrency(results.totalMonthlyPayment)}\n                          </span>\n                        </div>\n\n                        {results.monthlyDebts > 0 && (\n                          <div className=\"result-item\">\n                            <span>Other Debt Payments:</span>\n                            <span>\n                              {formatCurrency(results.monthlyDebts)}\n                            </span>\n                          </div>\n                        )}\n\n                        <div className=\"result-item total\">\n                          <span>Take-Home Remaining:</span>\n                          <span>\n                            {formatCurrency(results.monthlyTakeHome - results.totalMonthlyPayment - results.monthlyDebts)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className=\"no-results\">\n              <h3>Complete the form and calculate</h3>\n              <p>\n                Fill in your income and basic mortgage details to see what home price you can afford or \n                analyze a specific home price.\n              </p>\n            </div>\n          )}\n\n          {/* Affordability Guidelines */}\n          <div className=\"guidelines\">\n            <h3>Affordability Guidelines: The 28/36 Rule</h3>\n            <ul>\n              <li>\n                <strong>28% Rule:</strong> Your monthly housing payment (PITI: Principal, Interest, Taxes, Insurance) should not exceed 28% of your gross monthly income.\n              </li>\n              <li>\n                <strong>36% Rule:</strong> Your total monthly debt payments (including housing) should not exceed 36% of your gross monthly income.\n              </li>\n              <li>\n                <strong>Important:</strong> These are industry guidelines used by lenders to determine how much you can borrow. Your personal comfort level may differ.\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeAffordabilityCalculator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}