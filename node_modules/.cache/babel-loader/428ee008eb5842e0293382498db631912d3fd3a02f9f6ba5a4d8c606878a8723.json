{"ast":null,"code":"// src/utils/mortgageCalculators.js\n\nimport { validateMonthlyDebts, validateDownPaymentPercent, validateInterestRate, validateLoanTerm } from './taxValidators';\n\n// Calculate monthly mortgage payment\nexport const calculateMonthlyMortgage = (homePrice, downPaymentPercent, interestRate, loanTermYears) => {\n  // Calculate loan amount\n  const downPayment = homePrice * (downPaymentPercent / 100);\n  const loanAmount = homePrice - downPayment;\n\n  // Convert annual interest rate to monthly and decimal form\n  const monthlyInterestRate = interestRate / 100 / 12;\n\n  // Calculate number of payments\n  const numberOfPayments = loanTermYears * 12;\n\n  // Avoid division by zero for 0% interest\n  if (monthlyInterestRate === 0) {\n    return loanAmount / numberOfPayments;\n  }\n\n  // Use mortgage payment formula: M = P * (r * (1 + r)^n) / ((1 + r)^n - 1)\n  const monthlyPayment = loanAmount * (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)) / (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1);\n  return monthlyPayment;\n};\n\n// Calculate what percentage of take-home pay the mortgage represents\nexport const calculateMortgagePercentage = (monthlyMortgage, monthlyTakeHome) => {\n  if (monthlyTakeHome === 0) return 0;\n  return monthlyMortgage / monthlyTakeHome * 100;\n};\n\n// Calculate maximum home price based on take-home pay\nexport const calculateMaxHomePrice = (monthlyTakeHome, interestRate, loanTermYears, downPaymentPercent, monthlyDebts = 0) => {\n  // Maximum payment should be 28% of monthly take-home pay minus existing debts\n  const maxMonthlyPayment = monthlyTakeHome * 0.28 - monthlyDebts;\n  if (maxMonthlyPayment <= 0) return 0;\n\n  // Convert annual interest rate to monthly\n  const monthlyInterestRate = interestRate / 100 / 12;\n\n  // Number of payments\n  const numberOfPayments = loanTermYears * 12;\n\n  // Avoid division by zero for 0% interest\n  if (monthlyInterestRate === 0) {\n    const maxLoanAmount = maxMonthlyPayment * numberOfPayments;\n    return maxLoanAmount / (1 - downPaymentPercent / 100);\n  }\n\n  // Calculate maximum loan amount\n  // Using formula: P = pmt * (1 - (1 + r)^-n) / r\n  const maxLoanAmount = maxMonthlyPayment * (1 - Math.pow(1 + monthlyInterestRate, -numberOfPayments)) / monthlyInterestRate;\n\n  // Calculate max home price (loan amount + down payment)\n  const maxHomePrice = maxLoanAmount / (1 - downPaymentPercent / 100);\n  return maxHomePrice;\n};\n\n// Validate mortgage inputs\nexport const validateMortgageInputs = inputs => {\n  const errors = {};\n  if (inputs.includeHomePurchase) {\n    if (!inputs.homePrice || isNaN(parseFloat(inputs.homePrice)) || parseFloat(inputs.homePrice) <= 0) {\n      errors.homePrice = 'Please enter a valid home price';\n    }\n    const downPaymentError = validateDownPaymentPercent(inputs.downPaymentPercent);\n    if (downPaymentError) errors.downPaymentPercent = downPaymentError;\n    const interestRateError = validateInterestRate(inputs.interestRate);\n    if (interestRateError) errors.interestRate = interestRateError;\n    const loanTermError = validateLoanTerm(inputs.loanTermYears);\n    if (loanTermError) errors.loanTermYears = loanTermError;\n  }\n  return errors;\n};\n\n// Format currency for display\nexport const formatCurrency = value => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    maximumFractionDigits: 0\n  }).format(value);\n};\nexport default {\n  calculateMonthlyMortgage,\n  calculateMortgagePercentage,\n  calculateMaxHomePrice,\n  validateMortgageInputs,\n  formatCurrency\n};","map":{"version":3,"names":["validateMonthlyDebts","validateDownPaymentPercent","validateInterestRate","validateLoanTerm","calculateMonthlyMortgage","homePrice","downPaymentPercent","interestRate","loanTermYears","downPayment","loanAmount","monthlyInterestRate","numberOfPayments","monthlyPayment","Math","pow","calculateMortgagePercentage","monthlyMortgage","monthlyTakeHome","calculateMaxHomePrice","monthlyDebts","maxMonthlyPayment","maxLoanAmount","maxHomePrice","validateMortgageInputs","inputs","errors","includeHomePurchase","isNaN","parseFloat","downPaymentError","interestRateError","loanTermError","formatCurrency","value","Intl","NumberFormat","style","currency","maximumFractionDigits","format"],"sources":["/Users/elizabethrichardson/taxcalc/src/utils/mortgageCalculators.js"],"sourcesContent":["// src/utils/mortgageCalculators.js\n\nimport { validateMonthlyDebts, validateDownPaymentPercent, validateInterestRate, validateLoanTerm } from './taxValidators';\n\n// Calculate monthly mortgage payment\nexport const calculateMonthlyMortgage = (homePrice, downPaymentPercent, interestRate, loanTermYears) => {\n  // Calculate loan amount\n  const downPayment = homePrice * (downPaymentPercent / 100);\n  const loanAmount = homePrice - downPayment;\n  \n  // Convert annual interest rate to monthly and decimal form\n  const monthlyInterestRate = (interestRate / 100) / 12;\n  \n  // Calculate number of payments\n  const numberOfPayments = loanTermYears * 12;\n  \n  // Avoid division by zero for 0% interest\n  if (monthlyInterestRate === 0) {\n    return loanAmount / numberOfPayments;\n  }\n  \n  // Use mortgage payment formula: M = P * (r * (1 + r)^n) / ((1 + r)^n - 1)\n  const monthlyPayment = loanAmount * \n    (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)) / \n    (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1);\n  \n  return monthlyPayment;\n};\n\n// Calculate what percentage of take-home pay the mortgage represents\nexport const calculateMortgagePercentage = (monthlyMortgage, monthlyTakeHome) => {\n  if (monthlyTakeHome === 0) return 0;\n  return (monthlyMortgage / monthlyTakeHome) * 100;\n};\n\n// Calculate maximum home price based on take-home pay\nexport const calculateMaxHomePrice = (monthlyTakeHome, interestRate, loanTermYears, downPaymentPercent, monthlyDebts = 0) => {\n  // Maximum payment should be 28% of monthly take-home pay minus existing debts\n  const maxMonthlyPayment = (monthlyTakeHome * 0.28) - monthlyDebts;\n  \n  if (maxMonthlyPayment <= 0) return 0;\n  \n  // Convert annual interest rate to monthly\n  const monthlyInterestRate = (interestRate / 100) / 12;\n  \n  // Number of payments\n  const numberOfPayments = loanTermYears * 12;\n  \n  // Avoid division by zero for 0% interest\n  if (monthlyInterestRate === 0) {\n    const maxLoanAmount = maxMonthlyPayment * numberOfPayments;\n    return maxLoanAmount / (1 - (downPaymentPercent / 100));\n  }\n  \n  // Calculate maximum loan amount\n  // Using formula: P = pmt * (1 - (1 + r)^-n) / r\n  const maxLoanAmount = maxMonthlyPayment * \n    (1 - Math.pow(1 + monthlyInterestRate, -numberOfPayments)) / \n    monthlyInterestRate;\n  \n  // Calculate max home price (loan amount + down payment)\n  const maxHomePrice = maxLoanAmount / (1 - (downPaymentPercent / 100));\n  \n  return maxHomePrice;\n};\n\n// Validate mortgage inputs\nexport const validateMortgageInputs = (inputs) => {\n  const errors = {};\n  \n  if (inputs.includeHomePurchase) {\n    if (!inputs.homePrice || isNaN(parseFloat(inputs.homePrice)) || parseFloat(inputs.homePrice) <= 0) {\n      errors.homePrice = 'Please enter a valid home price';\n    }\n    \n    const downPaymentError = validateDownPaymentPercent(inputs.downPaymentPercent);\n    if (downPaymentError) errors.downPaymentPercent = downPaymentError;\n    \n    const interestRateError = validateInterestRate(inputs.interestRate);\n    if (interestRateError) errors.interestRate = interestRateError;\n    \n    const loanTermError = validateLoanTerm(inputs.loanTermYears);\n    if (loanTermError) errors.loanTermYears = loanTermError;\n  }\n  \n  return errors;\n};\n\n// Format currency for display\nexport const formatCurrency = (value) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    maximumFractionDigits: 0\n  }).format(value);\n};\n\nexport default {\n  calculateMonthlyMortgage,\n  calculateMortgagePercentage,\n  calculateMaxHomePrice,\n  validateMortgageInputs,\n  formatCurrency\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}