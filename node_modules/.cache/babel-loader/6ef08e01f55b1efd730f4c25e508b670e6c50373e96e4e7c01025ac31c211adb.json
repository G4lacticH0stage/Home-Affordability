{"ast":null,"code":"// Tax Types Enum\nexport const TAX_TYPES={FLAT_RATE:\"flat_rate\",// Simple percentage\nPROGRESSIVE:\"progressive\",// Bracket-based (like federal)\nSURTAX:\"surtax\",// Additional tax on state tax\nFLAT_AMOUNT:\"flat_amount\",// Fixed dollar amount\nTABLE_BASED:\"table_based\"// Like Oregon's system\n};// Base State Tax Data\nexport const STATE_TAX_DATA={\"Alabama\":{rate:0.05,hasLocalTax:false},\"Alaska\":{rate:0,hasLocalTax:false},\"Arizona\":{rate:0.025,hasLocalTax:false},\"Arkansas\":{rate:0.039,hasLocalTax:false},\"California\":{rate:0.133,hasLocalTax:false},\"Colorado\":{rate:0.044,hasLocalTax:true,taxType:\"city\"},\"Connecticut\":{rate:0.0699,hasLocalTax:false},\"Delaware\":{rate:0.066,hasLocalTax:false},\"Florida\":{rate:0,hasLocalTax:false},\"Georgia\":{rate:0.0539,hasLocalTax:false},\"Hawaii\":{rate:0.11,hasLocalTax:false},\"Idaho\":{rate:0.05965,hasLocalTax:false},\"Illinois\":{rate:0.049,hasLocalTax:false},\"Indiana\":{rate:0.03,hasLocalTax:true,taxType:\"county\"},\"Iowa\":{rate:0.038,hasLocalTax:true,taxType:\"school_district\"},\"Kansas\":{rate:0.0558,hasLocalTax:false},\"Kentucky\":{rate:0.04,hasLocalTax:true,taxType:\"city\"},\"Louisiana\":{rate:0.03,hasLocalTax:false},\"Maine\":{rate:0.0715,hasLocalTax:false},\"Maryland\":{rate:0.0575,hasLocalTax:true,taxType:\"county\"},\"Massachusetts\":{rate:0.09,hasLocalTax:false},\"Michigan\":{rate:0.0425,hasLocalTax:true,taxType:\"city\"},\"Minnesota\":{rate:0.0985,hasLocalTax:false},\"Mississippi\":{rate:0.044,hasLocalTax:false},\"Missouri\":{rate:0.047,hasLocalTax:true,taxType:\"city\"},\"Montana\":{rate:0.059,hasLocalTax:false},\"Nebraska\":{rate:0.052,hasLocalTax:false},\"Nevada\":{rate:0,hasLocalTax:false},\"New Hampshire\":{rate:0,hasLocalTax:false},\"New Jersey\":{rate:0.1075,hasLocalTax:true,taxType:\"city\"},\"New Mexico\":{rate:0.059,hasLocalTax:false},\"New York\":{rate:0.109,hasLocalTax:true,taxType:\"city\",useProgressiveBrackets:true},\"North Carolina\":{rate:0.0425,hasLocalTax:false},\"North Dakota\":{rate:0.025,hasLocalTax:false},\"Ohio\":{rate:0.035,hasLocalTax:true,taxType:\"city\"},\"Oklahoma\":{rate:0.0475,hasLocalTax:false},\"Oregon\":{rate:0.099,hasLocalTax:true,taxType:\"table_based\"},\"Pennsylvania\":{rate:0.0307,hasLocalTax:true,taxType:\"both\"},\"Rhode Island\":{rate:0.0599,hasLocalTax:false},\"South Carolina\":{rate:0.062,hasLocalTax:false},\"South Dakota\":{rate:0,hasLocalTax:false},\"Tennessee\":{rate:0,hasLocalTax:false},\"Texas\":{rate:0,hasLocalTax:false},\"Utah\":{rate:0.0455,hasLocalTax:false},\"Vermont\":{rate:0.0875,hasLocalTax:false},\"Virginia\":{rate:0.0575,hasLocalTax:false},\"Washington\":{rate:0.07,hasLocalTax:false},\"West Virginia\":{rate:0.0482,hasLocalTax:true,taxType:\"city\"},\"Wisconsin\":{rate:0.0765,hasLocalTax:false},\"Wyoming\":{rate:0,hasLocalTax:false}};// Federal Tax Brackets\n// Define the federal tax brackets correctly with \"limit\" being the upper bound of each bracket\nconst FEDERAL_TAX_BRACKETS_2024=[{min:0,max:11600,rate:0.10},{min:11600,max:47150,rate:0.12},{min:47150,max:100525,rate:0.22},{min:100525,max:191950,rate:0.24},{min:191950,max:243725,rate:0.32},{min:243725,max:609350,rate:0.35},{min:609350,max:Infinity,rate:0.37}];// Calculate progressive tax (like federal income tax)\nconst calculateProgressiveTax=(income,brackets)=>{let tax=0;for(let i=0;i<brackets.length;i++){const currentBracket=brackets[i];// Calculate income in this bracket\nconst bracketMin=currentBracket.min;const bracketMax=currentBracket.max;if(income>bracketMin){// Calculate the portion of income that falls within this bracket\nconst taxableInThisBracket=Math.min(income,bracketMax)-bracketMin;tax+=taxableInThisBracket*currentBracket.rate;}// If we've processed all income, we can stop\nif(income<=bracketMax)break;}return tax;};// Example calculation for $58,000 income\nfunction calculateExampleTax(){const income=58000;const federalTax=calculateProgressiveTax(income,FEDERAL_TAX_BRACKETS_2024);console.log(`Federal tax on $${income.toFixed(2)}:`);// Show calculation breakdown\nlet totalTax=0;for(let i=0;i<FEDERAL_TAX_BRACKETS_2024.length;i++){const bracket=FEDERAL_TAX_BRACKETS_2024[i];if(income>bracket.min){const taxableAmount=Math.min(income,bracket.max)-bracket.min;const taxInBracket=taxableAmount*bracket.rate;totalTax+=taxInBracket;console.log(`${bracket.min.toLocaleString()} to ${Math.min(income,bracket.max).toLocaleString()}: ${taxableAmount.toLocaleString()} @ ${(bracket.rate*100).toFixed(1)}% = $${taxInBracket.toFixed(2)}`);}if(income<=bracket.max)break;}console.log(`Total federal tax: $${totalTax.toFixed(2)}`);console.log(`Effective tax rate: ${(totalTax/income*100).toFixed(2)}%`);return federalTax;}calculateExampleTax();// FICA Tax Constants\nexport const FICA_RATES={socialSecurity:0.062,// 6.2%\nmedicare:0.0145,// 1.45%\nadditionalMedicare:0.009,// 0.9% additional Medicare tax for high earners\nsocialSecurityWageCap:168600// 2024 wage cap for Social Security tax\n};","map":{"version":3,"names":["TAX_TYPES","FLAT_RATE","PROGRESSIVE","SURTAX","FLAT_AMOUNT","TABLE_BASED","STATE_TAX_DATA","rate","hasLocalTax","taxType","useProgressiveBrackets","FEDERAL_TAX_BRACKETS_2024","min","max","Infinity","calculateProgressiveTax","income","brackets","tax","i","length","currentBracket","bracketMin","bracketMax","taxableInThisBracket","Math","calculateExampleTax","federalTax","console","log","toFixed","totalTax","bracket","taxableAmount","taxInBracket","toLocaleString","FICA_RATES","socialSecurity","medicare","additionalMedicare","socialSecurityWageCap"],"sources":["/Users/elizabethrichardson/taxcalc/src/data/tax-data.js"],"sourcesContent":["// Tax Types Enum\nexport const TAX_TYPES = {\n    FLAT_RATE: \"flat_rate\",       // Simple percentage\n    PROGRESSIVE: \"progressive\",    // Bracket-based (like federal)\n    SURTAX: \"surtax\",            // Additional tax on state tax\n    FLAT_AMOUNT: \"flat_amount\",   // Fixed dollar amount\n    TABLE_BASED: \"table_based\"    // Like Oregon's system\n  };\n  \n  // Base State Tax Data\n  export const STATE_TAX_DATA = {\n    \"Alabama\": { rate: 0.05, hasLocalTax: false},\n    \"Alaska\": { rate: 0, hasLocalTax: false },\n    \"Arizona\": { rate: 0.025, hasLocalTax: false },\n    \"Arkansas\": { rate: 0.039, hasLocalTax: false },\n    \"California\": { rate: 0.133, hasLocalTax: false },\n    \"Colorado\": { rate: 0.044, hasLocalTax: true, taxType: \"city\" },\n    \"Connecticut\": { rate: 0.0699, hasLocalTax: false },\n    \"Delaware\": { rate: 0.066, hasLocalTax: false},\n    \"Florida\": { rate: 0, hasLocalTax: false },\n    \"Georgia\": { rate: 0.0539, hasLocalTax: false },\n    \"Hawaii\": { rate: 0.11, hasLocalTax: false },\n    \"Idaho\": { rate: 0.05965, hasLocalTax: false },\n    \"Illinois\": { rate: 0.049, hasLocalTax: false },\n    \"Indiana\": { rate: 0.03, hasLocalTax: true, taxType: \"county\" },\n    \"Iowa\": { rate: 0.038, hasLocalTax: true, taxType: \"school_district\" },\n    \"Kansas\": { rate: 0.0558, hasLocalTax: false },\n    \"Kentucky\": { rate: 0.04, hasLocalTax: true, taxType: \"city\" },\n    \"Louisiana\": { rate: 0.03, hasLocalTax: false },\n    \"Maine\": { rate: 0.0715, hasLocalTax: false },\n    \"Maryland\": { rate: 0.0575, hasLocalTax: true, taxType: \"county\" },\n    \"Massachusetts\": { rate: 0.09, hasLocalTax: false },\n    \"Michigan\": { rate: 0.0425, hasLocalTax: true, taxType: \"city\" },\n    \"Minnesota\": { rate: 0.0985, hasLocalTax: false },\n    \"Mississippi\": { rate: 0.044, hasLocalTax: false },\n    \"Missouri\": { rate: 0.047, hasLocalTax: true, taxType: \"city\" },\n    \"Montana\": { rate: 0.059, hasLocalTax: false },\n    \"Nebraska\": { rate: 0.052, hasLocalTax: false },\n    \"Nevada\": { rate: 0, hasLocalTax: false },\n    \"New Hampshire\": { rate: 0, hasLocalTax: false },\n    \"New Jersey\": { rate: 0.1075, hasLocalTax: true, taxType: \"city\" },\n    \"New Mexico\": { rate: 0.059, hasLocalTax: false },\n    \"New York\": { rate: 0.109, hasLocalTax: true, taxType: \"city\", useProgressiveBrackets: true },\n    \"North Carolina\": { rate: 0.0425, hasLocalTax: false },\n    \"North Dakota\": { rate: 0.025, hasLocalTax: false },\n    \"Ohio\": { rate: 0.035, hasLocalTax: true, taxType: \"city\" },\n    \"Oklahoma\": { rate: 0.0475, hasLocalTax: false },\n    \"Oregon\": { rate: 0.099, hasLocalTax: true, taxType: \"table_based\" },\n    \"Pennsylvania\": { rate: 0.0307, hasLocalTax: true, taxType: \"both\" },\n    \"Rhode Island\": { rate: 0.0599, hasLocalTax: false },\n    \"South Carolina\": { rate: 0.062, hasLocalTax: false },\n    \"South Dakota\": { rate: 0, hasLocalTax: false },\n    \"Tennessee\": { rate: 0, hasLocalTax: false },\n    \"Texas\": { rate: 0, hasLocalTax: false },\n    \"Utah\": { rate: 0.0455, hasLocalTax: false },\n    \"Vermont\": { rate: 0.0875, hasLocalTax: false },\n    \"Virginia\": { rate: 0.0575, hasLocalTax: false },\n    \"Washington\": { rate: 0.07, hasLocalTax: false },\n    \"West Virginia\": { rate: 0.0482, hasLocalTax: true, taxType: \"city\" },\n    \"Wisconsin\": { rate: 0.0765, hasLocalTax: false },\n    \"Wyoming\": { rate: 0, hasLocalTax: false }\n  };\n  \n  // Federal Tax Brackets\n // Define the federal tax brackets correctly with \"limit\" being the upper bound of each bracket\nconst FEDERAL_TAX_BRACKETS_2024 = [\n  { min: 0, max: 11600, rate: 0.10 },\n  { min: 11600, max: 47150, rate: 0.12 },\n  { min: 47150, max: 100525, rate: 0.22 },\n  { min: 100525, max: 191950, rate: 0.24 },\n  { min: 191950, max: 243725, rate: 0.32 },\n  { min: 243725, max: 609350, rate: 0.35 },\n  { min: 609350, max: Infinity, rate: 0.37 }\n];\n\n// Calculate progressive tax (like federal income tax)\nconst calculateProgressiveTax = (income, brackets) => {\n  let tax = 0;\n  \n  for (let i = 0; i < brackets.length; i++) {\n    const currentBracket = brackets[i];\n    \n    // Calculate income in this bracket\n    const bracketMin = currentBracket.min;\n    const bracketMax = currentBracket.max;\n    \n    if (income > bracketMin) {\n      // Calculate the portion of income that falls within this bracket\n      const taxableInThisBracket = Math.min(income, bracketMax) - bracketMin;\n      tax += taxableInThisBracket * currentBracket.rate;\n    }\n    \n    // If we've processed all income, we can stop\n    if (income <= bracketMax) break;\n  }\n  \n  return tax;\n};\n\n// Example calculation for $58,000 income\nfunction calculateExampleTax() {\n  const income = 58000;\n  const federalTax = calculateProgressiveTax(income, FEDERAL_TAX_BRACKETS_2024);\n  \n  console.log(`Federal tax on $${income.toFixed(2)}:`);\n  \n  // Show calculation breakdown\n  let totalTax = 0;\n  for (let i = 0; i < FEDERAL_TAX_BRACKETS_2024.length; i++) {\n    const bracket = FEDERAL_TAX_BRACKETS_2024[i];\n    if (income > bracket.min) {\n      const taxableAmount = Math.min(income, bracket.max) - bracket.min;\n      const taxInBracket = taxableAmount * bracket.rate;\n      totalTax += taxInBracket;\n      \n      console.log(`${bracket.min.toLocaleString()} to ${Math.min(income, bracket.max).toLocaleString()}: ${taxableAmount.toLocaleString()} @ ${(bracket.rate * 100).toFixed(1)}% = $${taxInBracket.toFixed(2)}`);\n    }\n    \n    if (income <= bracket.max) break;\n  }\n  \n  console.log(`Total federal tax: $${totalTax.toFixed(2)}`);\n  console.log(`Effective tax rate: ${((totalTax / income) * 100).toFixed(2)}%`);\n  \n  return federalTax;\n}\n\ncalculateExampleTax(); \n  \n  // FICA Tax Constants\n  export const FICA_RATES = {\n    socialSecurity: 0.062,  // 6.2%\n    medicare: 0.0145,      // 1.45%\n    additionalMedicare: 0.009, // 0.9% additional Medicare tax for high earners\n    socialSecurityWageCap: 168600 // 2024 wage cap for Social Security tax\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}