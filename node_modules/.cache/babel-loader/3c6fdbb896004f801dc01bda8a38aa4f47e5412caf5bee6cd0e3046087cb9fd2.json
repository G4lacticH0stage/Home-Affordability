{"ast":null,"code":"// src/utils/taxValidators.js\nimport { FICA_RATES, STATE_TAX_DATA, TAX_TYPES, FEDERAL_TAX_BRACKETS } from '../data/tax-data';\nimport { INDIANA_COUNTIES } from '../data/indianaTaxData';\nimport { MARYLAND_COUNTIES } from '../data/marylandTaxData';\nimport { MICHIGAN_CITIES, calculateMichiganLocalTax } from '../data/michiganTaxData';\nimport { MISSOURI_CITIES } from '../data/missouriTaxData';\nimport { NEW_JERSEY_CITIES } from '../data/newJerseyTaxData';\nimport { NEW_YORK_TAX, calculateNYTax } from '../data/newYorkTaxData';\nimport { OHIO_MUNICIPALITIES } from '../data/ohioTaxData';\nimport { OREGON_TAX } from '../data/oregonTaxData';\nimport { PENNSYLVANIA_TAX } from '../data/pennsylvaniaTaxData';\nimport { WEST_VIRGINIA_TAX } from '../data/westVirginiaTaxData';\n// Validate an income amount\nexport const validateIncome = income => {\n  if (!income || income.trim() === '') {\n    return 'Income is required';\n  }\n  const numericIncome = parseFloat(income);\n  if (isNaN(numericIncome) || numericIncome <= 0) {\n    return 'Please enter a valid income amount';\n  }\n  return null;\n};\n\n// Validate state selection\nexport const validateState = state => {\n  if (!state) {\n    return 'State selection is required';\n  }\n  if (!STATE_TAX_DATA[state]) {\n    return 'Please select a valid state';\n  }\n  return null;\n};\n\n// Check if city or county exists in the appropriate data structure\nconst localJurisdictionExists = (state, localJurisdiction) => {\n  if (!state || !localJurisdiction) return false;\n  switch (state) {\n    case 'Indiana':\n      return INDIANA_COUNTIES[localJurisdiction] !== undefined;\n    case 'Maryland':\n      return MARYLAND_COUNTIES[localJurisdiction] !== undefined;\n    case 'Michigan':\n      return MICHIGAN_CITIES.exceptions[localJurisdiction] !== undefined || true;\n    // Michigan has default rate\n    case 'Missouri':\n      return MISSOURI_CITIES[localJurisdiction] !== undefined;\n    case 'New Jersey':\n      return NEW_JERSEY_CITIES[localJurisdiction] !== undefined;\n    case 'New York':\n      return NEW_YORK_TAX.cities[localJurisdiction] !== undefined;\n    case 'Ohio':\n      return OHIO_MUNICIPALITIES[localJurisdiction] !== undefined;\n    case 'Pennsylvania':\n      return PENNSYLVANIA_TAX.counties[localJurisdiction] !== undefined;\n    case 'West Virginia':\n      return WEST_VIRGINIA_TAX.cities[localJurisdiction] !== undefined;\n    default:\n      return false;\n  }\n};\n\n// Get the appropriate jurisdiction name (city, county, etc.) based on state\nconst getLocalJurisdictionLabel = state => {\n  if (!state || !STATE_TAX_DATA[state]) return 'location';\n  const stateInfo = STATE_TAX_DATA[state];\n  if (!stateInfo.hasLocalTax) return 'location';\n  switch (stateInfo.taxType) {\n    case 'county':\n      return 'county';\n    case 'city':\n      return 'city';\n    case 'school_district':\n      return 'school district';\n    case 'both':\n      return 'city/county';\n    default:\n      return 'location';\n  }\n};\n\n// Validate city/county selection when required\nexport const validateLocalJurisdiction = (state, localJurisdiction) => {\n  if (!state) return null;\n  const stateInfo = STATE_TAX_DATA[state];\n  if (!stateInfo || !stateInfo.hasLocalTax) return null;\n  if (!localJurisdiction) {\n    return `Please select a ${getLocalJurisdictionLabel(state)}`;\n  }\n  if (!localJurisdictionExists(state, localJurisdiction)) {\n    return `Please select a valid ${getLocalJurisdictionLabel(state)}`;\n  }\n  return null;\n};\n\n// Validate monthly debts\nexport const validateMonthlyDebts = debts => {\n  if (!debts || debts.trim() === '') return null;\n  const numericDebts = parseFloat(debts);\n  if (isNaN(numericDebts) || numericDebts < 0) {\n    return 'Monthly debts must be a positive number or zero';\n  }\n  return null;\n};\n\n// Validate down payment percentage\nexport const validateDownPaymentPercent = percent => {\n  if (!percent && percent !== 0) {\n    return 'Down payment percentage is required';\n  }\n  const numericPercent = parseFloat(percent);\n  if (isNaN(numericPercent) || numericPercent < 0 || numericPercent > 100) {\n    return 'Down payment must be between 0% and 100%';\n  }\n  return null;\n};\n\n// Validate interest rate\nexport const validateInterestRate = rate => {\n  if (!rate && rate !== 0) {\n    return 'Interest rate is required';\n  }\n  const numericRate = parseFloat(rate);\n  if (isNaN(numericRate) || numericRate < 0 || numericRate > 30) {\n    return 'Interest rate must be between 0% and 30%';\n  }\n  return null;\n};\n\n// Validate loan term\nexport const validateLoanTerm = term => {\n  if (!term) {\n    return 'Loan term is required';\n  }\n  const numericTerm = parseInt(term, 10);\n  if (isNaN(numericTerm) || numericTerm < 1 || numericTerm > 50) {\n    return 'Loan term must be between 1 and 50 years';\n  }\n  return null;\n};\n\n// Validate pay type\nexport const validatePayType = payType => {\n  const validPayTypes = ['hourly', 'weekly', 'biweekly', 'monthly', 'annual'];\n  if (!payType) {\n    return 'Pay type is required';\n  }\n  if (!validPayTypes.includes(payType)) {\n    return 'Please select a valid pay type';\n  }\n  return null;\n};\n\n// Validate form inputs\nexport const validateInputs = inputs => {\n  const errors = {};\n\n  // Validate income\n  const incomeError = validateIncome(inputs.income);\n  if (incomeError) errors.income = incomeError;\n\n  // Validate pay type if provided\n  if (inputs.payType) {\n    const payTypeError = validatePayType(inputs.payType);\n    if (payTypeError) errors.payType = payTypeError;\n  }\n\n  // Validate state\n  const stateError = validateState(inputs.state);\n  if (stateError) errors.state = stateError;\n\n  // Validate city/county if applicable\n  const localError = validateLocalJurisdiction(inputs.state, inputs.city);\n  if (localError) errors.city = localError;\n\n  // Validate monthly debts\n  const debtsError = validateMonthlyDebts(inputs.monthlyDebts);\n  if (debtsError) errors.monthlyDebts = debtsError;\n\n  // Validate home purchase fields if provided\n  if (inputs.homePurchase) {\n    // Validate down payment percentage\n    const downPaymentError = validateDownPaymentPercent(inputs.downPaymentPercent);\n    if (downPaymentError) errors.downPaymentPercent = downPaymentError;\n\n    // Validate interest rate\n    const interestRateError = validateInterestRate(inputs.interestRate);\n    if (interestRateError) errors.interestRate = interestRateError;\n\n    // Validate loan term\n    const loanTermError = validateLoanTerm(inputs.loanTerm);\n    if (loanTermError) errors.loanTerm = loanTermError;\n  }\n  return errors;\n};\nexport default {\n  validateIncome,\n  validateState,\n  validateLocalJurisdiction,\n  validateMonthlyDebts,\n  validateDownPaymentPercent,\n  validateInterestRate,\n  validateLoanTerm,\n  validatePayType,\n  validateInputs\n};","map":{"version":3,"names":["FICA_RATES","STATE_TAX_DATA","TAX_TYPES","FEDERAL_TAX_BRACKETS","INDIANA_COUNTIES","MARYLAND_COUNTIES","MICHIGAN_CITIES","calculateMichiganLocalTax","MISSOURI_CITIES","NEW_JERSEY_CITIES","NEW_YORK_TAX","calculateNYTax","OHIO_MUNICIPALITIES","OREGON_TAX","PENNSYLVANIA_TAX","WEST_VIRGINIA_TAX","validateIncome","income","trim","numericIncome","parseFloat","isNaN","validateState","state","localJurisdictionExists","localJurisdiction","undefined","exceptions","cities","counties","getLocalJurisdictionLabel","stateInfo","hasLocalTax","taxType","validateLocalJurisdiction","validateMonthlyDebts","debts","numericDebts","validateDownPaymentPercent","percent","numericPercent","validateInterestRate","rate","numericRate","validateLoanTerm","term","numericTerm","parseInt","validatePayType","payType","validPayTypes","includes","validateInputs","inputs","errors","incomeError","payTypeError","stateError","localError","city","debtsError","monthlyDebts","homePurchase","downPaymentError","downPaymentPercent","interestRateError","interestRate","loanTermError","loanTerm"],"sources":["/Users/elizabethrichardson/taxcalc/src/utils/taxValidators.js"],"sourcesContent":["  // src/utils/taxValidators.js\n  import { FICA_RATES, STATE_TAX_DATA, TAX_TYPES, FEDERAL_TAX_BRACKETS } from '../data/tax-data';\n  import { INDIANA_COUNTIES } from '../data/indianaTaxData';\n  import { MARYLAND_COUNTIES } from '../data/marylandTaxData';\n  import { MICHIGAN_CITIES, calculateMichiganLocalTax } from '../data/michiganTaxData';\n  import { MISSOURI_CITIES } from '../data/missouriTaxData';\n  import { NEW_JERSEY_CITIES } from '../data/newJerseyTaxData';\n  import { NEW_YORK_TAX, calculateNYTax } from '../data/newYorkTaxData';\n  import { OHIO_MUNICIPALITIES } from '../data/ohioTaxData';\n  import { OREGON_TAX } from '../data/oregonTaxData';\n  import { PENNSYLVANIA_TAX } from '../data/pennsylvaniaTaxData';\n  import { WEST_VIRGINIA_TAX } from '../data/westVirginiaTaxData';\n// Validate an income amount\nexport const validateIncome = (income) => {\n  if (!income || income.trim() === '') {\n    return 'Income is required';\n  }\n  \n  const numericIncome = parseFloat(income);\n  if (isNaN(numericIncome) || numericIncome <= 0) {\n    return 'Please enter a valid income amount';\n  }\n  \n  return null;\n};\n\n// Validate state selection\nexport const validateState = (state) => {\n  if (!state) {\n    return 'State selection is required';\n  }\n  \n  if (!STATE_TAX_DATA[state]) {\n    return 'Please select a valid state';\n  }\n  \n  return null;\n};\n\n// Check if city or county exists in the appropriate data structure\nconst localJurisdictionExists = (state, localJurisdiction) => {\n  if (!state || !localJurisdiction) return false;\n  \n  switch (state) {\n    case 'Indiana':\n      return INDIANA_COUNTIES[localJurisdiction] !== undefined;\n    case 'Maryland':\n      return MARYLAND_COUNTIES[localJurisdiction] !== undefined;\n    case 'Michigan':\n      return MICHIGAN_CITIES.exceptions[localJurisdiction] !== undefined || true; // Michigan has default rate\n    case 'Missouri':\n      return MISSOURI_CITIES[localJurisdiction] !== undefined;\n    case 'New Jersey':\n      return NEW_JERSEY_CITIES[localJurisdiction] !== undefined;\n    case 'New York':\n      return NEW_YORK_TAX.cities[localJurisdiction] !== undefined;\n    case 'Ohio':\n      return OHIO_MUNICIPALITIES[localJurisdiction] !== undefined;\n    case 'Pennsylvania':\n      return PENNSYLVANIA_TAX.counties[localJurisdiction] !== undefined;\n    case 'West Virginia':\n      return WEST_VIRGINIA_TAX.cities[localJurisdiction] !== undefined;\n    default:\n      return false;\n  }\n};\n\n// Get the appropriate jurisdiction name (city, county, etc.) based on state\nconst getLocalJurisdictionLabel = (state) => {\n  if (!state || !STATE_TAX_DATA[state]) return 'location';\n  \n  const stateInfo = STATE_TAX_DATA[state];\n  \n  if (!stateInfo.hasLocalTax) return 'location';\n  \n  switch (stateInfo.taxType) {\n    case 'county':\n      return 'county';\n    case 'city':\n      return 'city';\n    case 'school_district':\n      return 'school district';\n    case 'both':\n      return 'city/county';\n    default:\n      return 'location';\n  }\n};\n\n// Validate city/county selection when required\nexport const validateLocalJurisdiction = (state, localJurisdiction) => {\n  if (!state) return null;\n  \n  const stateInfo = STATE_TAX_DATA[state];\n  if (!stateInfo || !stateInfo.hasLocalTax) return null;\n  \n  if (!localJurisdiction) {\n    return `Please select a ${getLocalJurisdictionLabel(state)}`;\n  }\n  \n  if (!localJurisdictionExists(state, localJurisdiction)) {\n    return `Please select a valid ${getLocalJurisdictionLabel(state)}`;\n  }\n  \n  return null;\n};\n\n// Validate monthly debts\nexport const validateMonthlyDebts = (debts) => {\n  if (!debts || debts.trim() === '') return null;\n  \n  const numericDebts = parseFloat(debts);\n  if (isNaN(numericDebts) || numericDebts < 0) {\n    return 'Monthly debts must be a positive number or zero';\n  }\n  \n  return null;\n};\n\n// Validate down payment percentage\nexport const validateDownPaymentPercent = (percent) => {\n  if (!percent && percent !== 0) {\n    return 'Down payment percentage is required';\n  }\n  \n  const numericPercent = parseFloat(percent);\n  if (isNaN(numericPercent) || numericPercent < 0 || numericPercent > 100) {\n    return 'Down payment must be between 0% and 100%';\n  }\n  \n  return null;\n};\n\n// Validate interest rate\nexport const validateInterestRate = (rate) => {\n  if (!rate && rate !== 0) {\n    return 'Interest rate is required';\n  }\n  \n  const numericRate = parseFloat(rate);\n  if (isNaN(numericRate) || numericRate < 0 || numericRate > 30) {\n    return 'Interest rate must be between 0% and 30%';\n  }\n  \n  return null;\n};\n\n// Validate loan term\nexport const validateLoanTerm = (term) => {\n  if (!term) {\n    return 'Loan term is required';\n  }\n  \n  const numericTerm = parseInt(term, 10);\n  if (isNaN(numericTerm) || numericTerm < 1 || numericTerm > 50) {\n    return 'Loan term must be between 1 and 50 years';\n  }\n  \n  return null;\n};\n\n// Validate pay type\nexport const validatePayType = (payType) => {\n  const validPayTypes = ['hourly', 'weekly', 'biweekly', 'monthly', 'annual'];\n  \n  if (!payType) {\n    return 'Pay type is required';\n  }\n  \n  if (!validPayTypes.includes(payType)) {\n    return 'Please select a valid pay type';\n  }\n  \n  return null;\n};\n\n// Validate form inputs\nexport const validateInputs = (inputs) => {\n  const errors = {};\n  \n  // Validate income\n  const incomeError = validateIncome(inputs.income);\n  if (incomeError) errors.income = incomeError;\n  \n  // Validate pay type if provided\n  if (inputs.payType) {\n    const payTypeError = validatePayType(inputs.payType);\n    if (payTypeError) errors.payType = payTypeError;\n  }\n  \n  // Validate state\n  const stateError = validateState(inputs.state);\n  if (stateError) errors.state = stateError;\n  \n  // Validate city/county if applicable\n  const localError = validateLocalJurisdiction(inputs.state, inputs.city);\n  if (localError) errors.city = localError;\n  \n  // Validate monthly debts\n  const debtsError = validateMonthlyDebts(inputs.monthlyDebts);\n  if (debtsError) errors.monthlyDebts = debtsError;\n  \n  // Validate home purchase fields if provided\n  if (inputs.homePurchase) {\n    // Validate down payment percentage\n    const downPaymentError = validateDownPaymentPercent(inputs.downPaymentPercent);\n    if (downPaymentError) errors.downPaymentPercent = downPaymentError;\n    \n    // Validate interest rate\n    const interestRateError = validateInterestRate(inputs.interestRate);\n    if (interestRateError) errors.interestRate = interestRateError;\n    \n    // Validate loan term\n    const loanTermError = validateLoanTerm(inputs.loanTerm);\n    if (loanTermError) errors.loanTerm = loanTermError;\n  }\n  \n  return errors;\n};\n\nexport default {\n  validateIncome,\n  validateState,\n  validateLocalJurisdiction,\n  validateMonthlyDebts,\n  validateDownPaymentPercent,\n  validateInterestRate,\n  validateLoanTerm,\n  validatePayType,\n  validateInputs\n};"],"mappings":"AAAE;AACA,SAASA,UAAU,EAAEC,cAAc,EAAEC,SAAS,EAAEC,oBAAoB,QAAQ,kBAAkB;AAC9F,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,eAAe,EAAEC,yBAAyB,QAAQ,yBAAyB;AACpF,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,YAAY,EAAEC,cAAc,QAAQ,wBAAwB;AACrE,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,iBAAiB,QAAQ,6BAA6B;AACjE;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACnC,OAAO,oBAAoB;EAC7B;EAEA,MAAMC,aAAa,GAAGC,UAAU,CAACH,MAAM,CAAC;EACxC,IAAII,KAAK,CAACF,aAAa,CAAC,IAAIA,aAAa,IAAI,CAAC,EAAE;IAC9C,OAAO,oCAAoC;EAC7C;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAIC,KAAK,IAAK;EACtC,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,6BAA6B;EACtC;EAEA,IAAI,CAACtB,cAAc,CAACsB,KAAK,CAAC,EAAE;IAC1B,OAAO,6BAA6B;EACtC;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,MAAMC,uBAAuB,GAAGA,CAACD,KAAK,EAAEE,iBAAiB,KAAK;EAC5D,IAAI,CAACF,KAAK,IAAI,CAACE,iBAAiB,EAAE,OAAO,KAAK;EAE9C,QAAQF,KAAK;IACX,KAAK,SAAS;MACZ,OAAOnB,gBAAgB,CAACqB,iBAAiB,CAAC,KAAKC,SAAS;IAC1D,KAAK,UAAU;MACb,OAAOrB,iBAAiB,CAACoB,iBAAiB,CAAC,KAAKC,SAAS;IAC3D,KAAK,UAAU;MACb,OAAOpB,eAAe,CAACqB,UAAU,CAACF,iBAAiB,CAAC,KAAKC,SAAS,IAAI,IAAI;IAAE;IAC9E,KAAK,UAAU;MACb,OAAOlB,eAAe,CAACiB,iBAAiB,CAAC,KAAKC,SAAS;IACzD,KAAK,YAAY;MACf,OAAOjB,iBAAiB,CAACgB,iBAAiB,CAAC,KAAKC,SAAS;IAC3D,KAAK,UAAU;MACb,OAAOhB,YAAY,CAACkB,MAAM,CAACH,iBAAiB,CAAC,KAAKC,SAAS;IAC7D,KAAK,MAAM;MACT,OAAOd,mBAAmB,CAACa,iBAAiB,CAAC,KAAKC,SAAS;IAC7D,KAAK,cAAc;MACjB,OAAOZ,gBAAgB,CAACe,QAAQ,CAACJ,iBAAiB,CAAC,KAAKC,SAAS;IACnE,KAAK,eAAe;MAClB,OAAOX,iBAAiB,CAACa,MAAM,CAACH,iBAAiB,CAAC,KAAKC,SAAS;IAClE;MACE,OAAO,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMI,yBAAyB,GAAIP,KAAK,IAAK;EAC3C,IAAI,CAACA,KAAK,IAAI,CAACtB,cAAc,CAACsB,KAAK,CAAC,EAAE,OAAO,UAAU;EAEvD,MAAMQ,SAAS,GAAG9B,cAAc,CAACsB,KAAK,CAAC;EAEvC,IAAI,CAACQ,SAAS,CAACC,WAAW,EAAE,OAAO,UAAU;EAE7C,QAAQD,SAAS,CAACE,OAAO;IACvB,KAAK,QAAQ;MACX,OAAO,QAAQ;IACjB,KAAK,MAAM;MACT,OAAO,MAAM;IACf,KAAK,iBAAiB;MACpB,OAAO,iBAAiB;IAC1B,KAAK,MAAM;MACT,OAAO,aAAa;IACtB;MACE,OAAO,UAAU;EACrB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAGA,CAACX,KAAK,EAAEE,iBAAiB,KAAK;EACrE,IAAI,CAACF,KAAK,EAAE,OAAO,IAAI;EAEvB,MAAMQ,SAAS,GAAG9B,cAAc,CAACsB,KAAK,CAAC;EACvC,IAAI,CAACQ,SAAS,IAAI,CAACA,SAAS,CAACC,WAAW,EAAE,OAAO,IAAI;EAErD,IAAI,CAACP,iBAAiB,EAAE;IACtB,OAAO,mBAAmBK,yBAAyB,CAACP,KAAK,CAAC,EAAE;EAC9D;EAEA,IAAI,CAACC,uBAAuB,CAACD,KAAK,EAAEE,iBAAiB,CAAC,EAAE;IACtD,OAAO,yBAAyBK,yBAAyB,CAACP,KAAK,CAAC,EAAE;EACpE;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMY,oBAAoB,GAAIC,KAAK,IAAK;EAC7C,IAAI,CAACA,KAAK,IAAIA,KAAK,CAAClB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,IAAI;EAE9C,MAAMmB,YAAY,GAAGjB,UAAU,CAACgB,KAAK,CAAC;EACtC,IAAIf,KAAK,CAACgB,YAAY,CAAC,IAAIA,YAAY,GAAG,CAAC,EAAE;IAC3C,OAAO,iDAAiD;EAC1D;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,0BAA0B,GAAIC,OAAO,IAAK;EACrD,IAAI,CAACA,OAAO,IAAIA,OAAO,KAAK,CAAC,EAAE;IAC7B,OAAO,qCAAqC;EAC9C;EAEA,MAAMC,cAAc,GAAGpB,UAAU,CAACmB,OAAO,CAAC;EAC1C,IAAIlB,KAAK,CAACmB,cAAc,CAAC,IAAIA,cAAc,GAAG,CAAC,IAAIA,cAAc,GAAG,GAAG,EAAE;IACvE,OAAO,0CAA0C;EACnD;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAIC,IAAI,IAAK;EAC5C,IAAI,CAACA,IAAI,IAAIA,IAAI,KAAK,CAAC,EAAE;IACvB,OAAO,2BAA2B;EACpC;EAEA,MAAMC,WAAW,GAAGvB,UAAU,CAACsB,IAAI,CAAC;EACpC,IAAIrB,KAAK,CAACsB,WAAW,CAAC,IAAIA,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAG,EAAE,EAAE;IAC7D,OAAO,0CAA0C;EACnD;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;EACxC,IAAI,CAACA,IAAI,EAAE;IACT,OAAO,uBAAuB;EAChC;EAEA,MAAMC,WAAW,GAAGC,QAAQ,CAACF,IAAI,EAAE,EAAE,CAAC;EACtC,IAAIxB,KAAK,CAACyB,WAAW,CAAC,IAAIA,WAAW,GAAG,CAAC,IAAIA,WAAW,GAAG,EAAE,EAAE;IAC7D,OAAO,0CAA0C;EACnD;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAIC,OAAO,IAAK;EAC1C,MAAMC,aAAa,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,CAAC;EAE3E,IAAI,CAACD,OAAO,EAAE;IACZ,OAAO,sBAAsB;EAC/B;EAEA,IAAI,CAACC,aAAa,CAACC,QAAQ,CAACF,OAAO,CAAC,EAAE;IACpC,OAAO,gCAAgC;EACzC;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAIC,MAAM,IAAK;EACxC,MAAMC,MAAM,GAAG,CAAC,CAAC;;EAEjB;EACA,MAAMC,WAAW,GAAGvC,cAAc,CAACqC,MAAM,CAACpC,MAAM,CAAC;EACjD,IAAIsC,WAAW,EAAED,MAAM,CAACrC,MAAM,GAAGsC,WAAW;;EAE5C;EACA,IAAIF,MAAM,CAACJ,OAAO,EAAE;IAClB,MAAMO,YAAY,GAAGR,eAAe,CAACK,MAAM,CAACJ,OAAO,CAAC;IACpD,IAAIO,YAAY,EAAEF,MAAM,CAACL,OAAO,GAAGO,YAAY;EACjD;;EAEA;EACA,MAAMC,UAAU,GAAGnC,aAAa,CAAC+B,MAAM,CAAC9B,KAAK,CAAC;EAC9C,IAAIkC,UAAU,EAAEH,MAAM,CAAC/B,KAAK,GAAGkC,UAAU;;EAEzC;EACA,MAAMC,UAAU,GAAGxB,yBAAyB,CAACmB,MAAM,CAAC9B,KAAK,EAAE8B,MAAM,CAACM,IAAI,CAAC;EACvE,IAAID,UAAU,EAAEJ,MAAM,CAACK,IAAI,GAAGD,UAAU;;EAExC;EACA,MAAME,UAAU,GAAGzB,oBAAoB,CAACkB,MAAM,CAACQ,YAAY,CAAC;EAC5D,IAAID,UAAU,EAAEN,MAAM,CAACO,YAAY,GAAGD,UAAU;;EAEhD;EACA,IAAIP,MAAM,CAACS,YAAY,EAAE;IACvB;IACA,MAAMC,gBAAgB,GAAGzB,0BAA0B,CAACe,MAAM,CAACW,kBAAkB,CAAC;IAC9E,IAAID,gBAAgB,EAAET,MAAM,CAACU,kBAAkB,GAAGD,gBAAgB;;IAElE;IACA,MAAME,iBAAiB,GAAGxB,oBAAoB,CAACY,MAAM,CAACa,YAAY,CAAC;IACnE,IAAID,iBAAiB,EAAEX,MAAM,CAACY,YAAY,GAAGD,iBAAiB;;IAE9D;IACA,MAAME,aAAa,GAAGvB,gBAAgB,CAACS,MAAM,CAACe,QAAQ,CAAC;IACvD,IAAID,aAAa,EAAEb,MAAM,CAACc,QAAQ,GAAGD,aAAa;EACpD;EAEA,OAAOb,MAAM;AACf,CAAC;AAED,eAAe;EACbtC,cAAc;EACdM,aAAa;EACbY,yBAAyB;EACzBC,oBAAoB;EACpBG,0BAA0B;EAC1BG,oBAAoB;EACpBG,gBAAgB;EAChBI,eAAe;EACfI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}